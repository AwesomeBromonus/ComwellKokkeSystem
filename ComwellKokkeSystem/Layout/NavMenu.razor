@inject NavigationManager NavManager
@inject UserState UserState
@implements IDisposable

<div class="sidebar vh-100 shadow-sm" style="width: 250px; background: linear-gradient(180deg, #003b4a 0%, #002f3a 100%);">
    <div class="px-4 py-3 border-bottom border-light">
        <h5 class="m-0 text-white fw-semibold">ComwellKokkeSystem</h5>
    </div>

    <nav class="nav flex-column mt-3 px-3">
        <NavLink class="nav-link text-white" href="/" Match="NavLinkMatch.All">
            🏠 Hjem
        </NavLink>

        @if (UserState.IsLoggedIn && UserState.Role?.ToLower() == "admin")
        {
            <NavLink class="nav-link text-white" href="/administrator">
                🛠 Administrator
            </NavLink>
        }

        <NavLink class="nav-link text-white" href="/messages">
            💬 Chat
        </NavLink>

        @if (UserState.IsLoggedIn && UserState.Role?.ToLower() == "elev")
        {
            <NavLink class="nav-link text-white" href="/mitoverblik">
                🎓 Mit Overblik
            </NavLink>
        }

        @if (!UserState.IsLoggedIn)
        {
            <NavLink class="nav-link text-white" href="/login">
                🔐 Log ind
            </NavLink>
        }
        else
        {
            <hr class="text-white my-3" />
            <div class="text-white small mb-2">
                Logget ind som <strong>@UserState.Username</strong> (@UserState.Role)
            </div>
            <button class="btn btn-sm btn-outline-light w-100" @onclick="LogoutAsync">Log ud</button>
        }
    </nav>
</div>

@code {
    protected override void OnInitialized()
    {
        UserState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserState.OnChange -= StateHasChanged;
    }

    private async Task LogoutAsync()
    {
        await UserState.LogoutAsync();
        NavManager.NavigateTo("/");
    }
}
