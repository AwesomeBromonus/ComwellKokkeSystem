@page "/laering"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using Modeller
@inject HttpClient Http
@inject ILæringService LæringService

<h3 class="text-2xl font-semibold mb-4">📚 Læringsmaterialer</h3>

<button @onclick="ToggleForm"
        class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition mb-4">
    @(VisForm ? "Annuller" : "➕ Tilføj materiale")
</button>

@if (VisForm)
{
    <div class="bg-gray-100 p-4 rounded shadow mb-4">
        <EditForm Model="nyLæring" OnValidSubmit="HandleUpload">
            <div class="mb-2">
                <label class="block mb-1 font-medium">Titel</label>
                <InputText class="w-full p-2 rounded border" @bind-Value="nyLæring.Titel" />
            </div>

            <div class="mb-2">
                <label class="block mb-1 font-medium">Beskrivelse</label>
                <InputTextArea class="w-full p-2 rounded border" @bind-Value="nyLæring.Beskrivelse" />
            </div>

            <div class="mb-2">
                <label class="block mb-1 font-medium">Fil</label>
                <InputFile OnChange="HandleFileChange" accept=".pdf,.jpg,.jpeg,.png,.mp4" />
            </div>

            <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 mt-2">
                Upload
            </button>
        </EditForm>
    </div>
}

@if (Materialer.Count > 0)
{
    <div class="grid gap-4">
        @foreach (var item in Materialer)
        {
            <div class="p-4 border rounded bg-white shadow-sm">
                <h4 class="font-bold">@item.Titel</h4>
                <p class="text-sm text-gray-600 mb-2">@item.Beskrivelse</p>
                <div>
                    <span>@GetIkon(item.Filtype)</span>
                    <a href="/api/laering/fil/@item.Id" target="_blank" class="text-blue-600 underline ml-1">
                        @item.FilNavn
                    </a>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-gray-600">Ingen materialer fundet.</p>
}

@code {
    private List<Modeller.Læring> Materialer = new();
    private Modeller.Læring nyLæring = new();
    private IBrowserFile? valgtFil;
    private bool VisForm = false;

    protected override async Task OnInitializedAsync()
    {
        Materialer = await LæringService.HentAlleAsync();
    }

    private void ToggleForm() => VisForm = !VisForm;

    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        valgtFil = e.File;
    }

    private async Task HandleUpload()
    {
        if (valgtFil == null) return;

        using var stream = valgtFil.OpenReadStream(20 * 1024 * 1024); // max 20 MB
        var content = new MultipartFormDataContent
        {
            { new StringContent(nyLæring.Titel), "titel" },
            { new StringContent(nyLæring.Beskrivelse), "beskrivelse" },
            { new StreamContent(stream), "file", valgtFil.Name }
        };

        var response = await Http.PostAsync("api/laering/upload", content);

        if (response.IsSuccessStatusCode)
        {
            nyLæring = new Modeller.Læring();
            valgtFil = null;
            VisForm = false;
            Materialer = await LæringService.HentAlleAsync();
        }
    }

    private string GetIkon(string type) => type.ToLower() switch
    {
        "pdf" => "📄",
        "mp4" => "🎥",
        "mp3" => "🎵",
        "jpg" or "jpeg" or "png" => "🖼️",
        _ => "📁"
    };
}
