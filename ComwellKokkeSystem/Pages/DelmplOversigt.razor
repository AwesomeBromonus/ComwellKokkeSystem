@page "/elevplan/{id:int}/delmål"
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService

<h3 class="text-2xl font-semibold text-center my-4">Delmål for elevplan #@id</h3>

@if (praktikPerioder == null || praktikPerioder.Count == 0)
{
    <p class="text-center text-gray-500"><em>Indlæser praktikperioder...</em></p>
}
else
{
    <div class="max-w-xl mx-auto mb-6">
        <label for="periode" class="block mb-1 font-medium text-gray-700">Vælg praktikperiode:</label>
        <select id="periode" class="p-2 w-full border rounded-md" @onchange="OnPeriodeChange">
            @foreach (var p in praktikPerioder)
            {
                <option value="@p.Id" selected="@(p.Id == valgtPeriodeId)">@p.Navn</option>
            }
        </select>
    </div>

    @if (valgtPeriode?.Delmål?.Any() == true)
    {
        <div class="max-w-4xl mx-auto grid gap-4">
            @foreach (var delmål in valgtPeriode.Delmål)
            {
                <div class="border p-3 mb-2 rounded bg-white">
                    <h4 class="text-md font-bold">@delmål.Beskrivelse</h4>

                    <label class="flex items-center gap-2 mt-2">
                        <input type="checkbox"
                               checked="@IsDone(delmål.Status)"
                               @onchange="async _ => await ToggleStatus(delmål)" />
                        <span>@GetStatusText(delmål.Status)</span>
                    </label>

                    <p class="text-sm text-gray-500">
                        Deadline: @delmål.Deadline.ToString("dd-MM-yyyy")
                    </p>
                </div>
            }
        </div>

        <div class="mt-6 text-center">
            <p class="text-md font-semibold text-gray-700">
                Fremgang: @fremgang% (@antalFuldførte/@valgtPeriode.Delmål.Count fuldførte)
            </p>
        </div>
    }
    else
    {
        <p class="text-center text-gray-500 mt-4">Ingen delmål fundet for den valgte praktikperiode.</p>
    }

}

@code {
    [Parameter]
    public int id { get; set; }

    private Modeller.Elevplan? elevplan;
    private List<Modeller.Praktikperiode> praktikPerioder = new();
    private Modeller.Praktikperiode? valgtPeriode;
    private int valgtPeriodeId;

    private int antalFuldførte = 0;
    private int fremgang = 0;

    protected override async Task OnInitializedAsync()
    {
        elevplan = await ElevplanService.GetElevplanByIdAsync(id);
        praktikPerioder = await PraktikService.GetAllAsync();

        if (elevplan != null)
        {
            valgtPeriodeId = elevplan.PraktikperiodeId;
            valgtPeriode = await PraktikService.GetByIdAsync(valgtPeriodeId); // Her hentes status
            OpdaterFremgang();
        }
    }


    private async Task OnPeriodeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            valgtPeriodeId = id;
            valgtPeriode = await PraktikService.GetByIdAsync(valgtPeriodeId);
            OpdaterFremgang();
        }
    }

    private async Task ToggleStatus(Delmål d)
    {
        // Skift status
        d.Status = IsDone(d.Status) ? "Ikke fuldført" : "Fuldført";

        // Opdater databasen
        await PraktikService.UpdateDelmålAsync(valgtPeriode.Id, d.Id, d.Status);

        // Genindlæs praktikperioden fra databasen
        valgtPeriode = await PraktikService.GetByIdAsync(valgtPeriode.Id);

        // Beregn fremgang igen
        OpdaterFremgang();
    }

    private void OpdaterFremgang()
    {
        antalFuldførte = valgtPeriode?.Delmål?.Count(d => IsDone(d.Status)) ?? 0;
        int total = valgtPeriode?.Delmål?.Count ?? 0;
        fremgang = total > 0 ? (antalFuldførte * 100) / total : 0;
    }

    private bool IsDone(string status) => status == "Fuldført";
    private string GetStatusText(string status) => status == "Fuldført" ? "Fuldført" : "Ikke fuldført";
}
