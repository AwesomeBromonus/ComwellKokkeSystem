@page "/opret-elevplan"
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService
@inject IDelmaalService DelmaalService
@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Opret Elevplan</h3>

@if (!erTilladt)
{
    <div class="alert alert-danger mt-3">
        Adgang nægtet – kun administratorer kan oprette elevplaner.
    </div>
}
else
{
    <EditForm Model="elevplan" OnValidSubmit="GemElevplan">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Kommentar:</label>
            <InputTextArea class="form-control" @bind-Value="elevplan.Kommentar" />
        </div>

        <div class="mb-3">
            <label>Startdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.StartDato" />
        </div>

        <div class="mb-3">
            <label>Slutdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.SlutDato" />
        </div>

        

        <div class="mb-3">
            <label>Vælg bruger som skal have elevplanen:</label>
            @if (brugere.Count == 0)
            {
                <p class="text-muted">Ingen brugere fundet.</p>
            }
            else
            {
                @foreach (var b in brugere)
                {
                    <div class="card p-3 mb-2 shadow-sm"
                         style="cursor: pointer; border: @(valgtElevId == b.Id ? "2px solid #198754" : "1px solid #ccc")"
                         @onclick="@(() => valgtElevId = b.Id)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@b.Navn</strong><br />
                                <small>@b.Username – @b.Role</small>
                            </div>
                            <span class="badge bg-primary">ID: @b.Id</span>
                        </div>
                    </div>
                }
            }
        </div>

        <button class="btn btn-primary mt-3" type="submit">Gem elevplan</button>
    </EditForm>

    @if (success)
    {
        <div class="alert alert-success mt-3">Elevplan oprettet!</div>
    }
}

@code {
    private Modeller.Elevplan elevplan = new();
    private List<Modeller.Praktikperiode> praktikPerioder = new();
    private List<Modeller.Delmål> delmaalListe = new();
    private List<UserModel> brugere = new();
    private int valgtElevId = 0;
    private int valgtPraktikperiodeId = 0;
    private bool success = false;
    private bool erTilladt = false;

    protected override async Task OnInitializedAsync()
    {
        var rolle = await AuthService.GetCurrentUserRoleAsync();
        if (rolle != "admin")
        {
            erTilladt = false;
            Nav.NavigateTo("/elevplaner", true);
            return;
        }

        erTilladt = true;
        praktikPerioder = await PraktikService.GetAllAsync();
        brugere = await Http.GetFromJsonAsync<List<UserModel>>("api/users/all");
    }

   

    private async Task GemElevplan()
    {
        if (valgtPraktikperiodeId == 0 || valgtElevId == 0)
            return;

        elevplan.ElevId = valgtElevId;
        elevplan.PraktikperiodeIds = new List<int> { valgtPraktikperiodeId };
        elevplan.OprettetDato = DateTime.Now;

        await ElevplanService.AddElevplanAsync(elevplan);
        success = true;
        Nav.NavigateTo("/elevplaner");
    }
}
