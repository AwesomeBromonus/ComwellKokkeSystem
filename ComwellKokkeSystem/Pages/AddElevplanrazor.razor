@page "/opret-elevplan"
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService
@inject NavigationManager Nav

<h3>Opret Elevplan</h3>

<EditForm Model="elevplan" OnValidSubmit="GemElevplan">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="titel">Titel:</label>
        <InputText id="titel" class="form-control" @bind-Value="elevplan.Titel" />
    </div>

    <div class="mb-3">
        <label for="kommentar">Kommentar:</label>
        <InputTextArea id="kommentar" class="form-control" @bind-Value="elevplan.Kommentar" />
    </div>

    <div class="mb-3">
        <label for="startDato">Startdato:</label>
        <InputDate id="startDato" class="form-control" @bind-Value="elevplan.StartDato" />
    </div>

    <div class="mb-3">
        <label for="slutDato">Slutdato:</label>
        <InputDate id="slutDato" class="form-control" @bind-Value="elevplan.SlutDato" />
    </div>

    <div class="mb-3">
        <label for="praktikperiode">Praktikperiode:</label>
        <InputSelect class="form-control" @bind-Value="valgtPeriodeId" @onchange="HentPraktikperiode">
            <option disabled value="">-- Vælg praktikperiode --</option>
            @foreach (var p in praktikPerioder)
            {
                <option value="@p.Id">@p.Navn</option>
            }
        </InputSelect>
    </div>

    @if (valgtPeriode?.Delmål?.Any() == true)
    {
        <h5>Delmål for valgt praktikperiode:</h5>
        <ul>
            @foreach (var d in valgtPeriode.Delmål)
            {
                <li>@d.Beskrivelse (@d.Status)</li>
            }
        </ul>
    }
    else if (valgtPeriodeId != 0)
    {
        <p class="text-danger">Ingen delmål fundet for den valgte praktikperiode.</p>
    }

    <button type="submit" class="btn btn-primary mt-3">Gem elevplan</button>
</EditForm>

@if (success)
{
    <div class="alert alert-success mt-3">
        Elevplan oprettet!
    </div>
}

@code {
    private Modeller.Elevplan elevplan = new();
    private bool success = false;

    private List<Modeller.Praktikperiode> praktikPerioder = new();
    private Modeller.Praktikperiode? valgtPeriode;
    private int valgtPeriodeId;

    protected override async Task OnInitializedAsync()
    {
        praktikPerioder = await PraktikService.GetAllAsync();
    }

    private async Task HentPraktikperiode(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            valgtPeriodeId = id;
            valgtPeriode = await PraktikService.GetByIdAsync(id);
        }
    }

    private async Task GemElevplan()
    {
        if (valgtPeriodeId == 0)
            return;

        elevplan.PraktikperiodeId = valgtPeriodeId;

        await ElevplanService.AddElevplanAsync(elevplan);
        success = true;
        Nav.NavigateTo("/elevplaner");
    }
}
