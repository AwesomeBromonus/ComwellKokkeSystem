@page "/opret-elevplan"
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService
@inject IDelmaalService DelmaalService
@inject IAuthService AuthService
@inject NavigationManager Nav

<h3>Opret Elevplan</h3>

@if (!erTilladt)
{
    <div class="alert alert-danger mt-3">
        Adgang nægtet – kun administratorer kan oprette elevplaner.
    </div>
}
else
{
    <EditForm Model="elevplan" OnValidSubmit="GemElevplan">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Kommentar:</label>
            <InputTextArea class="form-control" @bind-Value="elevplan.Kommentar" />
        </div>

        <div class="mb-3">
            <label>Startdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.StartDato" />
        </div>

        <div class="mb-3">
            <label>Slutdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.SlutDato" />
        </div>

        

        <button class="btn btn-primary mt-3" type="submit">Gem elevplan</button>
    </EditForm>

    @if (success)
    {
        <div class="alert alert-success mt-3">Elevplan oprettet!</div>
    }
}

@code {
    private Modeller.Elevplan elevplan = new();
    private List<Modeller.Praktikperiode> praktikPerioder = new();
    private List<Modeller.Delmål> delmaalListe = new();
    private int valgtPraktikperiodeId = 0;
    private bool success = false;
    private bool erTilladt = false;

    protected override async Task OnInitializedAsync()
    {
        var rolle = await AuthService.GetCurrentUserRoleAsync();
        if (rolle != "admin")
        {
            erTilladt = false;
            Nav.NavigateTo("/elevplaner", true);
            return;
        }

        erTilladt = true;
        praktikPerioder = await PraktikService.GetAllAsync();
    }

   

    private async Task GemElevplan()
    {
        if (valgtPraktikperiodeId == 0)
            return;

        var brugerId = await AuthService.GetCurrentUserIdAsync();
        if (brugerId is null)
            return;

        elevplan.ElevId = brugerId.Value;
        elevplan.PraktikperiodeIds = new List<int> { valgtPraktikperiodeId };
        elevplan.OprettetDato = DateTime.Now;

        await ElevplanService.AddElevplanAsync(elevplan);
        success = true;
        Nav.NavigateTo("/elevplaner");
    }
}
