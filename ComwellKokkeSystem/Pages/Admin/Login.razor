@page "/login"
@layout LoginLayout

@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject UserState UserState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Modeller

<EditForm Model="@login" OnValidSubmit="@HandleLogin" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Brugernavn -->
    <div class="form-group">
        <div class="input-with-icon">
            <InputText class="form-control" placeholder="Brugernavn" @bind-Value="login.Username" />
        </div>
        <ValidationMessage For="@(() => login.Username)" />
    </div>

    <!-- Adgangskode -->
    <div class="form-group">
        <div class="input-with-icon">
            <InputText class="form-control" type="@passwordType" placeholder="Adgangskode" @bind-Value="login.Password" />
            <button class="toggle-password" type="button" @onclick="TogglePassword">
                @(passwordType == "password" ? "👁️" : "🙈")
            </button>
        </div>
        <ValidationMessage For="@(() => login.Password)" />
    </div>

    <!-- Husk mig -->
    <div class="form-check">
        <InputCheckbox class="form-check-input" @bind-Value="rememberMe" />
        <label class="form-check-label">Husk mig</label>
    </div>

    <!-- Login knap -->
    <button type="submit" class="btn btn-login" disabled="@isLoading">
        @(isLoading ? "Logger ind..." : "Log ind")
    </button>

    <!-- Fejlbesked -->
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="login-error">@message</div>
    }
</EditForm>

@code {
    private LoginModel login = new();
    private string message = "";
    private bool isLoading = false;
    private bool rememberMe = false;
    private string passwordType = "password";

    protected override async Task OnInitializedAsync()
    {
        await UserState.InitializeAsync();

        if (UserState.IsLoggedIn)
        {
            NavManager.NavigateTo(UserState.Role?.ToLower() switch
            {
                "admin" => "/administrator",
                "elev" => "/mitoverblik",
                _ => "/"
            }, forceLoad: true);
            return;
        }

        var storedUser = await localStorage.GetItemAsync<string>("rememberedUsername");
        if (!string.IsNullOrEmpty(storedUser))
        {
            login.Username = storedUser;
            rememberMe = true;
        }
    }

    private void TogglePassword()
    {
        passwordType = passwordType == "password" ? "text" : "password";
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        message = "";

        try
        {
            var success = await AuthService.Login(login);
            if (success)
            {
                if (rememberMe)
                    await localStorage.SetItemAsync("rememberedUsername", login.Username);
                else
                    await localStorage.RemoveItemAsync("rememberedUsername");

                var user = await AuthService.GetUserByUsername(login.Username);
                if (user != null)
                {
                    await UserState.SetUserAsync(
                        user.Username,
                        user.Role,
                        user.Id,
                        user.HotelId,
                        user.ElevplanId,
                        user.Navn,
                        user.Email
                    );

                    NavManager.NavigateTo(user.Role?.ToLower() switch
                    {
                        "admin" => "/administrator",
                        "elev" => "/mitoverblik",
                        _ => "/"
                    });
                }
                else
                {
                    message = "Kunne ikke hente brugerdata.";
                }
            }
            else
            {
                message = "Forkert brugernavn eller adgangskode.";
            }
        }
        catch (Exception ex)
        {
            message = $"Login-fejl: {ex.Message}";
        }

        isLoading = false;
    }
}
