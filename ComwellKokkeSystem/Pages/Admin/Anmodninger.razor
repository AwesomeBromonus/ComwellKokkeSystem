@page "/anmodninger"
@using Modeller
@using ComwellKokkeSystem.Service
@inject IAnmodningService AnmodningService
@inject IDelmaalService DelmaalService
@inject UserState UserState
@inject NavigationManager Nav
@inject IUnderdelmaalService UnderdelmaalService
@inject IUserService UserService

<link href="css/Panel.css" rel="stylesheet" />

<div class="admin-full-container">
    <div class="admin-header">
        <h2 class="admin-title">📩 Indkomne Delmålsanmodninger</h2>
        <p class="admin-subtitle">Se og behandl elevanmodninger om statusændring af delmål</p>
    </div>

    <div class="admin-content">
        @if (!UserState.IsLoggedIn)
        {
            <div class="alert alert-danger">Du skal være logget ind for at se denne side.</div>
        }
        else if (UserState.Role?.ToLower() != "admin" && UserState.Role?.ToLower() != "kok")
        {
            <div class="alert alert-warning">Denne side er kun for kokke og administratorer.</div>
        }
        else if (anmodninger == null)
        {
            <p>⏳ Indlæser anmodninger...</p>
        }
        else if (!anmodninger.Any())
        {
            <div class="alert alert-info">Ingen afventende anmodninger.</div>
        }
        else
        {
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                @foreach (var a in anmodninger)
                {
                    <div class="card p-4 shadow-sm rounded-3">
                        @if (a.DelmaalId != null && delmaalMap.ContainsKey(a.DelmaalId.Value))
                        {
                            <p><strong>Delmål:</strong> @delmaalMap[a.DelmaalId.Value].Beskrivelse</p>
                        }
                        else if (a.UnderdelmaalId != null && underdelmaalMap.ContainsKey(a.UnderdelmaalId.Value))
                        {
                            <p><strong>Underdelmål:</strong> @underdelmaalMap[a.UnderdelmaalId.Value].Beskrivelse</p>
                        }

                        <p><strong>Ønsket status:</strong> @a.ØnsketStatus</p>
                        <p><strong>Anmodet af:</strong> @brugerMap[a.ElevId].Navn</p>

                        <div class="d-flex gap-3 mt-3">
                            <button class="btn btn-success rounded-pill px-3 fw-bold" @onclick="() => BehandlAnmodning(a.Id, true)">✅ Accepter</button>
                            <button class="btn btn-danger rounded-pill px-3 fw-bold" @onclick="() => BehandlAnmodning(a.Id, false)">❌ Afvis</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Anmodning>? anmodninger;
    private Dictionary<int, Delmål> delmaalMap = new();
    private Dictionary<int, Underdelmaal> underdelmaalMap = new();
    private Dictionary<int, UserModel> brugerMap = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserState.Id == null)
        {
            Nav.NavigateTo("/login");
            return;
        }

        anmodninger = await AnmodningService.GetTilModtagerAsync(UserState.Id.Value);

        foreach (var a in anmodninger)
        {
            if (a.DelmaalId != null)
            {
                var delmaal = await DelmaalService.GetByIdAsync(a.DelmaalId.Value);
                if (delmaal != null)
                    delmaalMap[a.DelmaalId.Value] = delmaal;
            }
            else if (a.UnderdelmaalId != null)
            {
                var underdelmaal = await UnderdelmaalService.GetByIdAsync(a.UnderdelmaalId.Value);
                if (underdelmaal != null)
                    underdelmaalMap[a.UnderdelmaalId.Value] = underdelmaal;
            }

            if (!brugerMap.ContainsKey(a.ElevId))
            {
                var bruger = await UserService.GetByIdAsync(a.ElevId);
                if (bruger != null)
                {
                    brugerMap[a.ElevId] = bruger;
                }
            }
        }
    }

    private async Task BehandlAnmodning(int anmodningId, bool accepteret)
    {
        await AnmodningService.BehandlAsync(anmodningId, accepteret);

        anmodninger = await AnmodningService.GetTilModtagerAsync(UserState.Id.Value);
        delmaalMap.Clear();
        underdelmaalMap.Clear();
        brugerMap.Clear();

        foreach (var a in anmodninger)
        {
            if (a.DelmaalId != null)
            {
                var delmaal = await DelmaalService.GetByIdAsync(a.DelmaalId.Value);
                if (delmaal != null)
                    delmaalMap[delmaal.Id] = delmaal;
            }

            if (a.UnderdelmaalId != null)
            {
                var underdelmaal = await UnderdelmaalService.GetByIdAsync(a.UnderdelmaalId.Value);
                if (underdelmaal != null)
                    underdelmaalMap[underdelmaal.Id] = underdelmaal;
            }

            if (!brugerMap.ContainsKey(a.ElevId))
            {
                var bruger = await UserService.GetByIdAsync(a.ElevId);
                if (bruger != null)
                    brugerMap[a.ElevId] = bruger;
            }
        }

        StateHasChanged();
    }
}
