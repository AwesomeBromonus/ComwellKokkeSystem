@page "/anmodninger"
@using Modeller
@using ComwellKokkeSystem.Service
@inject IAnmodningService AnmodningService
@inject IDelmaalService DelmaalService
@inject IUserStateService UserState
@inject NavigationManager Nav
@inject IUnderdelmaalService UnderdelmaalService
@inject IUserService UserService
@inject IPraktikperiodeService PraktikService
@inject IElevplanService ElevplanService


<link href="css/Anmodninger.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;700&display=swap" rel="stylesheet" />

<h3 class="anmodning-overskrift">📩 Indkomne Delmålsanmodninger</h3>
<br />

@if (!UserState.IsLoggedIn)
{
    <div class="alert alert-danger">Du skal være logget ind for at se denne side.</div>
}
else if (!UserState.IsInRole("admin") && !UserState.IsInRole("kok"))
{
    <div class="alert alert-warning">Denne side er kun for kokke og administratorer.</div>
}
else if (anmodninger == null)
{
    <p>⏳ Indlæser anmodninger...</p>
}
else if (!anmodninger.Any())
{
    <div class="alert alert-info">Ingen afventende anmodninger.</div>
}
else
{
    <ul class="list-group">
        <div class="anmodning-container">
            @foreach (var a in anmodninger)
            {
                <div class="anmodning-kort">
                    @if (a.DelmaalId != null && delmaalMap.ContainsKey(a.DelmaalId.Value))
                    {
                        <strong>Delmål: </strong> @delmaalMap[a.DelmaalId.Value].Beskrivelse <br />
                    }
                    else if (a.UnderdelmaalId != null && underdelmaalMap.ContainsKey(a.UnderdelmaalId.Value))
                    {
                        <strong>Underdelmål: </strong> @underdelmaalMap[a.UnderdelmaalId.Value].Beskrivelse <br />
                    }

                    <strong>Ønsket status: </strong> @a.ØnsketStatus<br />
                    <strong>Anmodet af: </strong> @brugerMap[a.ElevId].Navn<br />

                    <div class="mt-2 d-flex gap-2">
                        <button class="btn btn-sm btn-success" @onclick="() => BehandlAnmodning(a.Id, true)">✅ Accepter</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => BehandlAnmodning(a.Id, false)">❌ Afvis</button>
                    </div>
                </div>
            }
        </div>
    </ul>
}

<br />
<h3 class="anmodning-overskrift">⏳ Delmål med deadline inden for 14 dage</h3>

@if (delmaalMedDeadline14Dage == null)
{
    <p>⏳ Indlæser delmål med snarlig deadline...</p>
}
else if (!delmaalMedDeadline14Dage.Any())
{
    <p>❕ Ingen deadlines tilgængelig.</p>
}
else
{
    <ul class="list-group">
        @foreach (var d in delmaalMedDeadline14Dage)
        {
            var elevNavn = delmaalTilElevMap.ContainsKey(d.Id)
            ? eleverMedDeadline.FirstOrDefault(e => e.Id == delmaalTilElevMap[d.Id])?.Navn ?? "Ukendt"
            : "Ukendt";


            <li class="list-group-item">
                <strong>Elev:</strong> @elevNavn <br />
                <strong>Beskrivelse:</strong> @d.Beskrivelse <br />
                <strong>Deadline:</strong> @d.Deadline.ToString("dd-MM-yyyy") <br />
                <strong>Status:</strong> @d.Status
            </li>
        }
    </ul>
}

@code {
    private List<Anmodning>? anmodninger;
    private Dictionary<int, Delmål> delmaalMap = new();
    private Dictionary<int, Underdelmaal> underdelmaalMap = new();
    private Dictionary<int, UserModel> brugerMap = new();
    private Dictionary<int, int> delmaalTilElevMap = new(); // DelmålId → ElevId


    private List<Delmål> delmaalMedDeadline14Dage = new();
    private List<UserModel> eleverMedDeadline = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserState.Id == null)
        {
            Nav.NavigateTo("/login");
            return;
        }

        anmodninger = await AnmodningService.GetTilModtagerAsync(UserState.Id.Value);

        foreach (var a in anmodninger)
        {
            if (a.DelmaalId != null)
            {
                var delmaal = await DelmaalService.GetByIdAsync(a.DelmaalId.Value);
                if (delmaal != null)
                    delmaalMap[a.DelmaalId.Value] = delmaal;
            }
            else if (a.UnderdelmaalId != null)
            {
                var underdelmaal = await UnderdelmaalService.GetByIdAsync(a.UnderdelmaalId.Value);
                if (underdelmaal != null)
                    underdelmaalMap[a.UnderdelmaalId.Value] = underdelmaal;
            }

            if (!brugerMap.ContainsKey(a.ElevId))
            {
                var bruger = await UserService.GetByIdAsync(a.ElevId);
                if (bruger != null)
                    brugerMap[a.ElevId] = bruger;
            }
        }

        // 🔁 Først hent listen
        delmaalMedDeadline14Dage = await DelmaalService.GetDelmaalMedDeadlineIndenFor14DageAsync();

        // 🔁 Find elev tilknyttet via praktikperiode → elevplan
        foreach (var d in delmaalMedDeadline14Dage)
        {
            var praktik = await PraktikService.GetByIdAsync(d.PraktikperiodeId);
            if (praktik != null)
            {
                var elevplan = await ElevplanService.GetElevplanByIdAsync(praktik.ElevplanId);
                if (elevplan != null)
                {
                    delmaalTilElevMap[d.Id] = elevplan.ElevId;

                    var bruger = await UserService.GetByIdAsync(elevplan.ElevId);
                    if (bruger != null && !eleverMedDeadline.Any(e => e.Id == bruger.Id))
                    {
                        eleverMedDeadline.Add(bruger);
                    }
                }
            }
        }
    }


    private async Task BehandlAnmodning(int anmodningId, bool accepteret)
    {
        await AnmodningService.BehandlAsync(anmodningId, accepteret);

        anmodninger = await AnmodningService.GetTilModtagerAsync(UserState.Id.Value);
        delmaalMap.Clear();
        underdelmaalMap.Clear();
        brugerMap.Clear();

        foreach (var a in anmodninger)
        {
            if (a.DelmaalId != null)
            {
                var delmaal = await DelmaalService.GetByIdAsync(a.DelmaalId.Value);
                if (delmaal != null)
                    delmaalMap[delmaal.Id] = delmaal;
            }

            if (a.UnderdelmaalId != null)
            {
                var underdelmaal = await UnderdelmaalService.GetByIdAsync(a.UnderdelmaalId.Value);
                if (underdelmaal != null)
                    underdelmaalMap[underdelmaal.Id] = underdelmaal;
            }

            if (!brugerMap.ContainsKey(a.ElevId))
            {
                var bruger = await UserService.GetByIdAsync(a.ElevId);
                if (bruger != null)
                    brugerMap[a.ElevId] = bruger;
            }
        }

        StateHasChanged();
    }
}