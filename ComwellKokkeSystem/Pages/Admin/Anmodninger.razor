@page "/anmodninger"
@using Modeller
@using ComwellKokkeSystem.Service;
@inject IAnmodningService AnmodningService
@inject IDelmaalService DelmaalService
@inject UserState UserState
@inject NavigationManager Nav
@inject IUnderdelmaalService UnderdelmaalService
@inject IUserService UserService




<h3 class="text-xl font-bold mb-4">📩 Indkomne Delmålsanmodninger</h3>

@if (!UserState.IsLoggedIn)
{
    <div class="alert alert-danger">Du skal være logget ind for at se denne side.</div>
}
else if (UserState.Role?.ToLower() != "admin" && UserState.Role?.ToLower() != "kok")
{
    <div class="alert alert-warning">Denne side er kun for kokke og administratorer.</div>
}
else if (anmodninger == null)
{
    <p>⏳ Indlæser anmodninger...</p>
}
else if (!anmodninger.Any())
{
    <div class="alert alert-info">Ingen afventende anmodninger.</div>
}
else
{
    <ul class="list-group">
       
           @foreach (var a in anmodninger)
        {
           
            Delmål? delmaal = null;
            <li class="list-group-item mb-3">
            @if (a.DelmaalId != null && delmaalMap.ContainsKey(a.DelmaalId.Value))
            {
                <strong>Delmål: </strong> @delmaalMap[a.DelmaalId.Value].Beskrivelse
                <br />
            }
            else if (a.UnderdelmaalId != null && underdelmaalMap.ContainsKey(a.UnderdelmaalId.Value))
            {
                <strong>Underdelmål: </strong> @underdelmaalMap[a.UnderdelmaalId.Value].Beskrivelse
                <br />
            }


            
                <strong>Ønsket status: </strong> @a.ØnsketStatus <br />
                <strong>Anmodet af: </strong> @brugerMap[a.ElevId].Navn <br />



                <div class="mt-2 d-flex gap-2">
                    <button class="btn btn-sm btn-success" @onclick="() => BehandlAnmodning(a.Id, true)">✅ Accepter</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => BehandlAnmodning(a.Id, false)">❌ Afvis</button>
                </div>
            </li>
        }
      
    </ul>
}

@code {
    // Listen over alle anmodninger, som vises på siden
    private List<Anmodning>? anmodninger;

    // Opslagsmappe: Delmål-ID -> Delmål-objekt (bruges til at finde beskrivelse m.m.)
    private Dictionary<int, Delmål> delmaalMap = new();

    // Opslagsmappe: Underdelmål-ID -> Underdelmål-objekt
    private Dictionary<int, Underdelmaal> underdelmaalMap = new();

    // Opslagsmappe: Bruger-ID -> Brugerdata (fx navn), så man kan vise hvem der har sendt anmodningen
    private Dictionary<int, UserModel> brugerMap = new();



    protected override async Task OnInitializedAsync()
    {
        // Hvis brugeren ikke er logget ind (dvs. intet ID findes i brugerens session)
        if (UserState.Id == null)
        {
            // Navigér brugeren til login-siden
            Nav.NavigateTo("/login");
            return; // Stop videre behandling
        }
    }


    // Hent alle anmodninger der er sendt til den aktuelle bruger (fx en admin eller kok)
    anmodninger = await AnmodningService.GetTilModtagerAsync(UserState.Id.Value);

// Gennemgå hver enkelt anmodning
foreach (var a in anmodninger)
{
    // Hvis anmodningen handler om et delmål
    if (a.DelmaalId != null)
    {
    // Hent delmålet fra databasen via DelmaalService
    var delmaal = await DelmaalService.GetByIdAsync(a.DelmaalId.Value);

    // Hvis det findes, tilføj det til opslagslisten (dictionary) med ID som nøgle
    if (delmaal != null)
        delmaalMap[a.DelmaalId.Value] = delmaal;
    }
    // Hvis anmodningen i stedet handler om et underdelmål
    else if (a.UnderdelmaalId != null)
    {
    // Hent underdelmålet
    var underdelmaal = await UnderdelmaalService.GetByIdAsync(a.UnderdelmaalId.Value);

    // Tilføj til opslagslisten hvis det findes
    if (underdelmaal != null)
        underdelmaalMap[a.UnderdelmaalId.Value] = underdelmaal;
    }

// Hent og gem elev-brugeren der har sendt anmodningen, hvis ikke allerede hentet
if (!brugerMap.ContainsKey(a.ElevId))
{
    var bruger = await UserService.GetByIdAsync(a.ElevId);
    if (bruger != null)
    {
    brugerMap[a.ElevId] = bruger;
    }
}
}

    

  private async Task BehandlAnmodning(int anmodningId, bool accepteret)
{
    // 📤 Send svaret (accepter eller afvis) til backend via service
    await AnmodningService.BehandlAsync(anmodningId, accepteret);

    // 🔄 Hent opdateret liste af anmodninger (efter én er behandlet)
    anmodninger = await AnmodningService.GetTilModtagerAsync(UserState.Id.Value);

    // 🧹 Ryd opslagstabellen med delmål
    delmaalMap.Clear();

    // 🔁 Genopbyg delmål-opslaget med de nye/aktive anmodninger
    foreach (var a in anmodninger)
    {
    if (a.DelmaalId != null)
    {
        // 🔍 Hent det specifikke delmål for denne anmodning
        var delmaal = await DelmaalService.GetByIdAsync(a.DelmaalId.Value);

        if (delmaal != null)
        {
            // 🗃️ Gem delmålet i lokal map (så vi kan slå det op senere uden ny hentning)
            delmaalMap[delmaal.Id] = delmaal;
        }
    }
    }

    // 🔁 Tving UI til at opdatere sig selv med de nye data
    StateHasChanged();
}
}