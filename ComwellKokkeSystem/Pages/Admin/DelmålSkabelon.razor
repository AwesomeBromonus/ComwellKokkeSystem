@page "/delmaalskabeloner"
@inject HttpClient Http
@using Modeller

<h3>🧾 Elevplanskabelon</h3>

@if (skabeloner == null)
{
    <p>Indlæser skabeloner...</p>
}
else
{
    @for (int periode = 1; periode <= 3; periode++)
    {
        var periodeSkabeloner = skabeloner.Where(s => s.PraktikperiodeNummer == periode).ToList();

        if (periodeSkabeloner.Any())
        {
            <div class="border rounded p-3 mb-4 shadow-sm bg-light">
                <h4 class="mb-3">📌 Praktikperiode @periode</h4>
                <table class="table table-striped mb-0">
                    <thead>
                        <tr>
                            <th>Beskrivelse</th>
                            <th>Underdelmål</th>
                            <th>Handlinger</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var s in periodeSkabeloner)
                        {
                            <tr>
                                <td>@s.Beskrivelse</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleUnderdelmaalVisning(s.Id)">
                                        @(udvidetDelmaalId == s.Id ? "⬆️ Skjul" : "⬇️ Vis")
                                    </button>
                                </td>

                               
                              
                                <td>
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => RedigerSkabelon(s)">✏️</button>
                                    <button class="btn btn-sm btn-danger me-1" @onclick="() => SletSkabelon(s.Id)">🗑️</button>
                                    <button class="btn btn-sm btn-success" @onclick="() => ÅbenUnderdelmaalModal(s.Id)">➕ Underdelmål</button>
                                </td>
                            </tr>

                            @if (udvidetDelmaalId == s.Id && underdelmaalMap.ContainsKey(s.Id))
                            {
                                <tr>
                                    <td colspan="6">
                                        <ul class="list-group list-group-flush">
                                            @foreach (var u in underdelmaalMap[s.Id])
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@u.Beskrivelse</strong>
                                                    </div>
                                                    <div>
                                                        <button class="btn btn-sm btn-warning me-1" @onclick="() => RedigerUnderdelmaal(u)">✏️</button>
                                                        <button class="btn btn-sm btn-danger" @onclick="() => SletUnderdelmaal(u.Id, s.Id)">🗑️</button>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            }
                        }


                    </tbody>
                </table>
            </div>
        }
    }
}

<!-- Tilføj delmål-knap -->
<button class="btn btn-primary mb-4" @onclick="ÅbenTilføjModal">➕ Tilføj delmål</button>

<!-- Modal til tilføjelse/redigering af delmålsskabelon -->
<div class="modal fade @(visModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@((redigerMode ? "Rediger delmålsskabelon" : "Tilføj ny delmålsskabelon"))</h5>
                <button type="button" class="btn-close" @onclick="LukModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="nySkabelon" OnValidSubmit="GemSkabelon">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-2">
                        <label>Praktikperiode:</label>
                        <InputNumber class="form-control" @bind-Value="nySkabelon.PraktikperiodeNummer" />
                    </div>

                    <div class="mb-2">
                        <label>Beskrivelse:</label>
                        <InputText class="form-control" @bind-Value="nySkabelon.Beskrivelse" />
                    </div>

                    <div class="mb-2">
                        <label>Deadline offset (dage):</label>
                        <InputNumber class="form-control" @bind-Value="nySkabelon.DeadlineOffsetDage" />
                    </div>

                    <div class="mb-2">
                        <label>Ansvarlig:</label>
                        <InputText class="form-control" @bind-Value="nySkabelon.Ansvarlig" />
                    </div>

                    <div class="mb-2">
                        <label>Igangsætter:</label>
                        <InputText class="form-control" @bind-Value="nySkabelon.Igangsætter" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">@((redigerMode) ? "Opdater" : "Tilføj")</button>
                        <button type="button" class="btn btn-secondary" @onclick="LukModal">Annuller</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Modal til tilføjelse af underdelmålsskabelon -->
<div class="modal fade @(visUnderdelmaalModal ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Tilføj underdelmål til delmål @valgtDelmaalSkabelonId</h5>
                <button type="button" class="btn-close" @onclick="LukUnderdelmaalModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="nyUnderdelmaal" OnValidSubmit="GemUnderdelmaalSkabelon">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-2">
                        <label>Beskrivelse:</label>
                        <InputText class="form-control" @bind-Value="nyUnderdelmaal.Beskrivelse" />
                    </div>

                    <div class="mb-2">
                        <label>Deadline offset (dage):</label>
                        <InputNumber class="form-control" @bind-Value="nyUnderdelmaal.DeadlineOffsetDage" />
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">
                            @(redigererUnderdelmaal ? "Opdater" : "Tilføj")
                        </button>

                        <button type="button" class="btn btn-secondary" @onclick="LukUnderdelmaalModal">Annuller</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<DelmaalSkabelon>? skabeloner;
    private DelmaalSkabelon nySkabelon = new();
    private bool redigerMode = false;
    private bool visModal = false;

    private bool visUnderdelmaalModal = false;
    private int valgtDelmaalSkabelonId;
    private UnderdelmaalSkabelon nyUnderdelmaal = new();
    private int? udvidetDelmaalId = null;
    private Dictionary<int, List<UnderdelmaalSkabelon>> underdelmaalMap = new();
    private bool redigererUnderdelmaal = false;


    protected override async Task OnInitializedAsync()
    {
        await HentAlle();
    }

    private async Task HentAlle()
    {
        skabeloner = await Http.GetFromJsonAsync<List<DelmaalSkabelon>>("api/delmaalskabelon");
    }

    private async Task GemSkabelon()
    {
        if (redigerMode)
        {
            await Http.PutAsJsonAsync($"api/delmaalskabelon/{nySkabelon.Id}", nySkabelon);
        }
        else
        {
            await Http.PostAsJsonAsync("api/delmaalskabelon", nySkabelon);
        }

        visModal = false;
        redigerMode = false;
        nySkabelon = new();
        await HentAlle();
    }

    private void RedigerSkabelon(DelmaalSkabelon s)
    {
        nySkabelon = new DelmaalSkabelon
            {
                Id = s.Id,
                PraktikperiodeNummer = s.PraktikperiodeNummer,
                Beskrivelse = s.Beskrivelse,
                DeadlineOffsetDage = s.DeadlineOffsetDage,
                Ansvarlig = s.Ansvarlig,
                Igangsætter = s.Igangsætter
            };
        redigerMode = true;
        visModal = true;
    }

    private async Task SletSkabelon(int id)
    {
        await Http.DeleteAsync($"api/delmaalskabelon/{id}");
        await HentAlle();
    }

    private void ÅbenTilføjModal()
    {
        redigerMode = false;
        nySkabelon = new();
        visModal = true;
    }

    private void LukModal()
    {
        visModal = false;
        redigerMode = false;
        nySkabelon = new();
    }


    private void ÅbenUnderdelmaalModal(int delmaalSkabelonId)
    {
        valgtDelmaalSkabelonId = delmaalSkabelonId;
        nyUnderdelmaal = new UnderdelmaalSkabelon
            {
                DelmaalSkabelonId = delmaalSkabelonId
            };
        redigererUnderdelmaal = false;
        visUnderdelmaalModal = true;
    }

    private void RedigerUnderdelmaal(UnderdelmaalSkabelon u)
    {
        nyUnderdelmaal = new UnderdelmaalSkabelon
            {
                Id = u.Id,
                DelmaalSkabelonId = u.DelmaalSkabelonId,
                Beskrivelse = u.Beskrivelse,
                DeadlineOffsetDage = u.DeadlineOffsetDage
            };
        valgtDelmaalSkabelonId = u.DelmaalSkabelonId;
        redigererUnderdelmaal = true;
        visUnderdelmaalModal = true;
    }

    private void LukUnderdelmaalModal()
    {
        visUnderdelmaalModal = false;
        nyUnderdelmaal = new();
    }

    private async Task GemUnderdelmaalSkabelon()
    {
        if (redigererUnderdelmaal)
        {
            await Http.PutAsJsonAsync($"api/underdelmaalskabelon/{nyUnderdelmaal.Id}", nyUnderdelmaal);
        }
        else
        {
            await Http.PostAsJsonAsync("api/underdelmaalskabelon", nyUnderdelmaal);
        }

        visUnderdelmaalModal = false;
        nyUnderdelmaal = new();

        // 🔁 Genindlæs underdelmål for det valgte delmål – det opdaterer UI'et
        underdelmaalMap.Remove(valgtDelmaalSkabelonId); // sørg for at den henter igen
        await ToggleUnderdelmaalVisning(valgtDelmaalSkabelonId);
    }


    private async Task ToggleUnderdelmaalVisning(int delmaalSkabelonId)
    {
        if (udvidetDelmaalId == delmaalSkabelonId)
        {
            udvidetDelmaalId = null; // fold sammen
        }
        else
        {
            udvidetDelmaalId = delmaalSkabelonId;

            if (!underdelmaalMap.ContainsKey(delmaalSkabelonId))
            {
                var result = await Http.GetFromJsonAsync<List<UnderdelmaalSkabelon>>(
                    $"api/underdelmaalskabelon/delmaalskabelon/{delmaalSkabelonId}");

                underdelmaalMap[delmaalSkabelonId] = result ?? new List<UnderdelmaalSkabelon>();
            }
        }
    }
    private async Task SletUnderdelmaal(int id, int delmaalSkabelonId)
    {
        await Http.DeleteAsync($"api/underdelmaalskabelon/{id}");

        //  Fjern cachet data så det genindlæses
        underdelmaalMap.Remove(delmaalSkabelonId);

        // Genhent opdateret liste
        await ToggleUnderdelmaalVisning(delmaalSkabelonId);
    }



}
