@page "/delmaalskabeloner"
@* KOMPONENT: Blazor Razor Component for delmålsskabeloner *@
@inject IDelmaalSkabelonService DelmaalSkabelonService
@inject IUnderdelmaalSkabelonService UnderdelmaalSkabelonService
@using LayoutComponenter
@using Modeller
@using System.Linq
<link href="css/modal.css" rel="stylesheet" />


<link href="css/Delmaal.css" rel="stylesheet" />

<h3>🧾 Elevplanskabelon</h3>

<!-- Ser om der er skabeloner-->
@if (skabeloner == null)
{
    <p>Indlæser skabeloner...</p>
}

else
{
    <!-- Forloob der tager praktikperioder fra 1 til 3-->
    @for (int periode = 1; periode <= 3; periode++)
    {
        <!--LinQ hvor vi i listen finder alle praktikperiode nummer og sætter lig med periode i en liste1-->
        var periodeSkabeloner = skabeloner.Where(s => s.PraktikperiodeNummer == periode).ToList();
        
        if (periodeSkabeloner.Any())
        {
            <!--Laver en tabel for hver praktikperiode med delmål og underdelmål-->
            <div class="border rounded p-3 mb-4 shadow-sm bg-light">
                <h4 class="mb-3">📌 Praktikperiode @periode</h4>
                <table class="table table-striped mb-0">
                    <thead>
                        <tr>
                            <th class="beskrivelse-col">Beskrivelse</th>
                            <th class="underdelmaal-col text-center">Underdelmål</th>
                            <th class="handlinger-col text-end">Handlinger</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!--Viser liste over alle delmål i delmål skabelonen-->
                        @foreach (var s in periodeSkabeloner)
                        {
                            <tr>
                                <td class="beskrivelse-col">@s.Beskrivelse</td>
                                <td class="underdelmaal-col">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleUnderdelmaalVisning(s.Id)">
                                        @(udvidetDelmaalId == s.Id ? "⬆️ Skjul" : "⬇️ Vis")
                                    </button>
                                </td>
                                <!--Knapper til redigering, åbning og sletning-->
                                <td class="handlinger-col">
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => RedigerSkabelon(s)">✏️</button>
                                    <button class="btn btn-sm btn-danger me-1" @onclick="() => SletSkabelon(s.Id)">🗑️</button>
                                    <button class="btn btn-sm btn-success" @onclick="() => ÅbenUnderdelmaalModal(s.Id)">➕ Underdelmål</button>
                                </td>
                            </tr>

                            <!--Viser for alle underdelmålene-->
                            @if (udvidetDelmaalId == s.Id)
                            {
                                var relevanteUnderdelmaal = underdelmaalListe.Where(u => u.DelmaalSkabelonId == s.Id).ToList();
                                if (relevanteUnderdelmaal.Any())
                                {
                                    <tr>
                                        <td colspan="3">
                                            <ul class="list-group list-group-flush">
                                                @foreach (var u in relevanteUnderdelmaal)
                                                {
                                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                                        <div>
                                                            <strong>@u.Beskrivelse</strong><br />
                                                            <small class="text-muted">🗓 Deadline-dage: @u.Deadline</small>
                                                        </div>
                                                        <div>
                                                            <!--Knapper til redigering og sletning-->
                                                            <button class="btn btn-sm btn-warning me-1" @onclick="() => RedigerUnderdelmaal(u)">✏️</button>
                                                            <button class="btn btn-sm btn-danger" @onclick="() => SletUnderdelmaal(u.Id, s.Id)">🗑️</button>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    }
}

<!-- Tilføj delmål-knap -->
<button class="btn btn-primary mb-4" @onclick="ÅbenTilføjModal">➕ Tilføj delmål</button>

<!--Modaldialog komponent for delmål-->
<Modal Show="@visModal"
       Title="@((redigerMode ? "Rediger delmålsskabelon" : "Tilføj ny delmålsskabelon"))"
       OnClose="LukModal">
    <ChildContent>
        <EditForm Model="nySkabelon" OnValidSubmit="GemSkabelon">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputNumber class="form-control mb-2" @bind-Value="nySkabelon.PraktikperiodeNummer" />
            <InputText class="form-control mb-2" @bind-Value="nySkabelon.Beskrivelse" />
            <InputText class="form-control mb-2" @bind-Value="nySkabelon.Ansvarlig" />
            <InputText class="form-control mb-2" @bind-Value="nySkabelon.Igangsætter" />
        </EditForm>
    </ChildContent>
    <FooterContent>
        <button type="submit" class="btn btn-success">@((redigerMode) ? "Opdater" : "Tilføj")</button>
        <button type="button" class="btn btn-secondary" @onclick="LukModal">Annuller</button>
    </FooterContent>
</Modal>

<!--Modaldialog komponent for underdelmål-->
<Modal Show="@visUnderdelmaalModal"
       Title="@(redigererUnderdelmaal ? "Rediger underdelmål" : $"Tilføj underdelmål til delmål {valgtDelmaalSkabelonId}")"
       OnClose="LukUnderdelmaalModal">

    <ChildContent>
        <EditForm Model="nyUnderdelmaal" OnValidSubmit="GemUnderdelmaalSkabelon">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText class="form-control mb-2" @bind-Value="nyUnderdelmaal.Beskrivelse" />
            <label for="deadlineInput">Deadline</label>
            <InputDate id="deadlineInput" class="form-control mb-2" @bind-Value="nyUnderdelmaal.Deadline" />
        </EditForm>
    </ChildContent>

    <FooterContent>
        <button type="submit" class="btn btn-success">@((redigererUnderdelmaal) ? "Opdater" : "Tilføj")</button>
        <button type="button" class="btn btn-secondary" @onclick="LukUnderdelmaalModal">Annuller</button>
    </FooterContent>

</Modal>

@code {
    @* KLASSE: C# kode bag komponenten *@

    //Alle vores instans variabler og defineret variabler
    private List<DelmaalSkabelon>? skabeloner;
    private DelmaalSkabelon nySkabelon = new();
    private bool redigerMode = false;
    private bool visModal = false;
    private bool visUnderdelmaalModal = false;
    private int valgtDelmaalSkabelonId;
    private UnderdelmaalSkabelon nyUnderdelmaal = new();
    private int? udvidetDelmaalId = null;
    private List<UnderdelmaalSkabelon> underdelmaalListe = new();
    private bool redigererUnderdelmaal = false;

    //Metode der henter alle delmål i delmålskabelonen, når siden starter
    protected override async Task OnInitializedAsync()
    {
        skabeloner = await DelmaalSkabelonService.GetAllAsync();
    }

    //Gør det muligt at opdatere delmål og tilføje samt henter alle delmålene
    private async Task GemSkabelon()
    {
        if (redigerMode)
            await DelmaalSkabelonService.UpdateAsync(nySkabelon);
        else
            await DelmaalSkabelonService.AddAsync(nySkabelon);

        visModal = false;
        redigerMode = false;
        nySkabelon = new();
        skabeloner = await DelmaalSkabelonService.GetAllAsync();
    }

    //Metode som gør det muligt at redigere delmål skabeloenen
    private void RedigerSkabelon(DelmaalSkabelon s)
    {
        nySkabelon = new DelmaalSkabelon
            {
                Id = s.Id,
                PraktikperiodeNummer = s.PraktikperiodeNummer,
                Beskrivelse = s.Beskrivelse,
                Ansvarlig = s.Ansvarlig,
                Igangsætter = s.Igangsætter
            };
        redigerMode = true;
        visModal = true;
    }

    //Sletter et delmål og henter alle efter
    private async Task SletSkabelon(int id)
    {
        await DelmaalSkabelonService.DeleteAsync(id);
        skabeloner = await DelmaalSkabelonService.GetAllAsync();
    }

    //Åbner modal
    private void ÅbenTilføjModal() => (nySkabelon, visModal, redigerMode) = (new(), true, false);
    
    //Lukker modal
    private void LukModal() => (visModal, redigerMode, nySkabelon) = (false, false, new());

    //Åbner underdelmål modaldialog, for et bestemt delmål
    private void ÅbenUnderdelmaalModal(int delmaalSkabelonId)
    {
        valgtDelmaalSkabelonId = delmaalSkabelonId;
        nyUnderdelmaal = new UnderdelmaalSkabelon { DelmaalSkabelonId = delmaalSkabelonId };
        redigererUnderdelmaal = false;
        visUnderdelmaalModal = true;
    }

    //Redigere et underdelmål for et bestemt delmål
    private void RedigerUnderdelmaal(UnderdelmaalSkabelon u)
    {
        nyUnderdelmaal = new UnderdelmaalSkabelon
            {
                Id = u.Id,
                DelmaalSkabelonId = u.DelmaalSkabelonId,
                Beskrivelse = u.Beskrivelse,
                Deadline = u.Deadline
            };
        valgtDelmaalSkabelonId = u.DelmaalSkabelonId;
        redigererUnderdelmaal = true;
        visUnderdelmaalModal = true;
    }

    //Lukker undermodal
    private void LukUnderdelmaalModal() => (visUnderdelmaalModal, nyUnderdelmaal) = (false, new());

    //Gemmer ændringer og tilføjelser af undermodel delmål
    private async Task GemUnderdelmaalSkabelon()
    {
        if (redigererUnderdelmaal)
            await UnderdelmaalSkabelonService.UpdateAsync(nyUnderdelmaal);
        else
            await UnderdelmaalSkabelonService.AddAsync(nyUnderdelmaal);

        visUnderdelmaalModal = false;

        underdelmaalListe.RemoveAll(u => u.DelmaalSkabelonId == valgtDelmaalSkabelonId);
        await ToggleUnderdelmaalVisning(valgtDelmaalSkabelonId);
    }

    //Viser eller skjuler underdelmål for et bestemt delmål i skabelonen
    private async Task ToggleUnderdelmaalVisning(int delmaalSkabelonId)
    {
        if (udvidetDelmaalId == delmaalSkabelonId)
        {
            udvidetDelmaalId = null;
        }
        else
        {
            udvidetDelmaalId = delmaalSkabelonId;

            if (!underdelmaalListe.Any(u => u.DelmaalSkabelonId == delmaalSkabelonId))
            {
                var result = await UnderdelmaalSkabelonService.GetByDelmaalSkabelonIdAsync(delmaalSkabelonId);
                underdelmaalListe.AddRange(result);
            }
        }
    }

    //Sletter et underdelmål
    private async Task SletUnderdelmaal(int id, int delmaalSkabelonId)
    {
        await UnderdelmaalSkabelonService.DeleteAsync(id);
        underdelmaalListe.RemoveAll(u => u.Id == id);
        await ToggleUnderdelmaalVisning(delmaalSkabelonId);
    }
}
