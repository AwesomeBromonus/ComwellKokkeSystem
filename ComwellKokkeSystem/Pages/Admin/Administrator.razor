@page "/administrator"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserState UserState
@using Modeller

<link href="css/Panel.css" rel="stylesheet" />

<div class="admin-container">
    @if (!UserState.IsLoggedInChecked)
    {
        <p class="loading-text">⏳ Indlæser brugerstatus...</p>
    }
    else if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning">🔒 Du skal være logget ind for at se denne side.</div>
    }
    else if (UserState.Role?.ToLower() != "admin")
    {
        <div class="alert alert-danger">🚫 Adgang nægtet – kun administratorer har adgang.</div>
    }
    else
    {
        <!-- 🔝 Top -->
        <div class="admin-header">
            <div class="admin-header-top">
                <h2>🛠 Administratorpanel – velkommen, <span class="username">@UserState.Email</span>!</h2>
            </div>
        </div>

        <!-- 🚀 Dashboard-kort -->
        <div class="dashboard-cards">
            <div class="dashboard-card" @onclick="@(() => NavManager.NavigateTo("/opretuser"))">
                <div class="icon">👤</div>
                <h4>Opret bruger</h4>
                <p>Tilføj ny systembruger</p>
            </div>
            <div class="dashboard-card" @onclick="@(() => NavManager.NavigateTo("/opret-elevplan"))">
                <div class="icon">📋</div>
                <h4>Opret elevplan</h4>
                <p>Opret og tildel elevplan</p>
            </div>
            <div class="dashboard-card highlight" @onclick="@(() => NavManager.NavigateTo("/anmodninger"))">
                <div class="icon">📥</div>
                <h4>Anmodninger</h4>
                <p><strong>@anmodningerAntal</strong> afventer godkendelse</p>
            </div>
        </div>

        <!-- 🔍 Filter -->
        <div class="search-section">
            <input class="search-input" placeholder="🔍 Søg email..." @bind="søgeord" />
            <select class="role-filter" @bind="valgtRolle">
                <option value="">Alle roller</option>
                <option value="elev">Elev</option>
                <option value="admin">Administrator</option>
                <option value="kok">Kok</option>
                <option value="hr">HR</option>
            </select>
        </div>

        <!-- 👤 Brugerliste -->
        <div class="user-grid">
            @foreach (var b in brugere.Where(b =>
           (string.IsNullOrWhiteSpace(søgeord) || b.Email.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
           (string.IsNullOrWhiteSpace(valgtRolle) || b.Role?.ToLower() == valgtRolle)))
            {
                <div class="user-card" @onclick="@(() => VisDetaljer(b))">
                    <img src="@GetImageUrl(b.Id)"
                         class="user-image rounded-circle mb-2" width="64" height="64" alt="Profil" />
                    <h5>@b.Navn</h5>
                    <p>@b.Email</p>
                    <span class="role-tag @GetRoleClass(b.Role)">@b.Role</span>
                </div>
            }
        </div>

        <!-- 🧾 Modal -->
        @if (valgtBruger is not null)
        {
            <div class="modal-backdrop">
                <div class="modal-window">
                    <div class="modal-header">
                        <h5><i class="fa fa-user me-2"></i> Brugerinfo: @valgtBruger.Navn</h5>
                        <button class="btn-close" @onclick="LukDetaljer">×</button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Navn:</strong> @valgtBruger.Navn</p>
                        <p><strong>Email:</strong> @valgtBruger.Email</p>
                        <p><strong>Telefon:</strong> @valgtBruger.Tlf</p>
                        <p><strong>Adresse:</strong> @valgtBruger.Adresse</p>
                        <p><strong>Hotel-ID:</strong> @valgtBruger.HotelId</p>
                        <p><strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()</p>
                        <p><strong>Rolle:</strong> <span class="role-tag @GetRoleClass(valgtBruger.Role)">@valgtBruger.Role</span></p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="LukDetaljer">Luk</button>
                        <button class="btn btn-danger" @onclick="SletBrugerAsync">Slet</button>
                        @if (valgtBruger.Role?.ToLower() == "elev" && valgtBruger.ElevplanId > 0)
                        {
                            <button class="btn btn-info" @onclick="@(() => SeElevplan(valgtBruger.ElevplanId.Value))">Se elevplan</button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<UserModel> brugere = new();
    private UserModel? valgtBruger;
    private string søgeord = "";
    private string valgtRolle = "";
    private int anmodningerAntal = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await HentAntalAnmodninger();
    }

    private async Task LoadUsers()
    {
        try
        {
            var users = await Http.GetFromJsonAsync<List<UserModel>>("api/users/all");
            if (users is not null)
                brugere = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fejl ved indlæsning af brugere: " + ex.Message);
        }
    }

    private async Task HentAntalAnmodninger()
    {
        try
        {
            var liste = await Http.GetFromJsonAsync<List<Anmodning>>("api/anmodning");
            if (liste != null)
                anmodningerAntal = liste.Count(a => a.Status?.ToLower() == "afventer");
        }
        catch
        {
            anmodningerAntal = 0;
        }
    }

    private void VisDetaljer(UserModel bruger) => valgtBruger = bruger;
    private void LukDetaljer() => valgtBruger = null;

    private async Task SletBrugerAsync()
    {
        if (valgtBruger != null)
        {
            var response = await Http.DeleteAsync($"api/users/{valgtBruger.Id}");
            if (response.IsSuccessStatusCode)
            {
                brugere.Remove(valgtBruger);
                valgtBruger = null;
            }
        }
    }

    private void SeElevplan(int elevplanId) => NavManager.NavigateTo($"/delmaal/{elevplanId}");

    private string GetImageUrl(int id) => $"https://localhost:7013/uploads/{id}.jpg";

    private string GetRoleClass(string? role) => role?.ToLower() switch
    {
        "admin" => "role-admin",
        "elev" => "role-elev",
        "kok" => "role-kok",
        "hr" => "role-hr",
        _ => "role-ukendt"
    };
}
