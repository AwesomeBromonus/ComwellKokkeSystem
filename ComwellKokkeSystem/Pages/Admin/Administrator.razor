@page "/administrator"
@inject IUserService UserService
@inject IElevplanService ElevplanService
@inject IAnmodningService AnmodningService
@inject NavigationManager NavManager
@inject IUserStateService UserState

@using Modeller
@using ComwellKokkeSystem.Service
@using LayoutComponenter

<link href="css/Panel.css" rel="stylesheet" />
<link href="css/modal.css" rel="stylesheet" />



<div class="admin-container">

    @if (!UserState.IsLoggedInChecked)
    {
        <p>Indlæser brugerstatus...</p>
    }
    else if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning">Du skal være logget ind for at se denne side.</div>
    }
    else if (UserState.Role?.ToLower() != "admin")
    {
        <div class="alert alert-danger">Adgang nægtet – kun administratorer har adgang.</div>
    }
    else
    {
        <div class="admin-header">
            <h2>Administratorpanel</h2>
            <p>Velkommen, <span class="username">@UserState.CurrentUser?.Navn</span></p>
        </div>

        <div class="dashboard-cards">
            <div class="dashboard-card" @onclick="@(() => NavManager.NavigateTo("/opretuser"))">
                <div class="icon">👤</div>
                <h4>Opret bruger</h4>
            </div>
            <div class="dashboard-card" @onclick="@(() => NavManager.NavigateTo("/opret-elevplan"))">
                <div class="icon">📋</div>
                <h4>Opret elevplan</h4>
            </div>
            <div class="dashboard-card highlight" @onclick="@(() => NavManager.NavigateTo("/anmodninger"))">
                <div class="icon">📥</div>
                <h4>Notifikationer</h4>
                <p><strong>@anmodningerAntal</strong> afventer</p>
            </div>
        </div>

        <div class="search-section">
            <input class="search-input" placeholder="Søg brugernavn..." @bind="søgeord" />
            <select class="role-filter" @bind="valgtRolle">
                <option value="">Alle roller</option>
                <option value="elev">Elev</option>
                <option value="admin">Administrator</option>
                <option value="kok">Kok</option>
            </select>
            <select class="role-filter" @bind="valgtHotel">
                <option value="">Alle hoteller</option>
                @foreach (var hotel in alleHoteller)
                {
                    <option value="@hotel">@hotel</option>
                }
            </select>
        </div>

        <div class="user-grid">
            @foreach (var bruger in brugere.Where(b =>
           (string.IsNullOrWhiteSpace(søgeord) || b.Username.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
           (string.IsNullOrWhiteSpace(valgtRolle) || b.Role?.ToLower() == valgtRolle) &&
           (string.IsNullOrWhiteSpace(valgtHotel) || b.HotelNavn == valgtHotel)))
            {
                <div class="user-card d-flex justify-content-between align-items-center p-3 shadow-sm border rounded"
                     @onclick="@(() => VisDetaljer(bruger))"
                     style="background-color: #fff;">
                    <div class="user-text">
                        <h5 class="mb-1">@bruger.Navn</h5>
                        <span class="role-tag @GetRoleClass(bruger.Role)">@bruger.Role</span><br />
                        <small class="text-muted">@bruger.HotelNavn</small>
                    </div>
                    <img src="@GetImageUrl(bruger.Id)" onerror="this.style.display='none';"
                         class="user-image rounded-circle ms-3" style="width: 64px; height: 64px; object-fit: cover;"
                         alt="Brugerbillede" />
                </div>
            }
        </div>

        <Modal Show="@(valgtBruger != null)"
               Title="@ModalTitel"
               OnClose="LukDetaljer">

            <ChildContent>
                @if (valgtBruger is not null)
                {
                    @if (isEditing)
                    {
                        <label>Navn</label>
                        <InputText class="form-control" @bind-Value="valgtBruger.Navn" />

                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="valgtBruger.Email" />

                        <label>Telefon</label>
                        <InputText class="form-control" @bind-Value="valgtBruger.Tlf" />

                        <label>Adresse</label>
                        <InputText class="form-control" @bind-Value="valgtBruger.Adresse" />

                        <label>Hotel</label>
                        <select class="form-control" @bind="valgtBruger.HotelNavn">
                            <option disabled value="">Vælg hotel</option>
                            @foreach (var h in alleHoteller)
                            {
                                <option value="@h">@h</option>
                            }
                        </select>

                        <label>Startdato</label>
                        <InputDate class="form-control" @bind-Value="valgtBruger.StartDato" />

                        <label>Slutdato</label>
                        <InputDate class="form-control" @bind-Value="valgtBruger.SlutDato" />

                        <label>Rolle</label>
                        <InputSelect class="form-control" @bind-Value="valgtBruger.Role">
                            <option disabled value="">Vælg rolle</option>
                            <option value="elev">Elev</option>
                            <option value="admin">Administrator</option>
                            <option value="kok">Kok</option>
                        </InputSelect>
                    }
                    else
                    {
                        <p><strong>Navn:</strong> @valgtBruger.Navn</p>
                        <p><strong>Email:</strong> @valgtBruger.Email</p>
                        <p><strong>Telefon:</strong> @valgtBruger.Tlf</p>
                        <p><strong>Adresse:</strong> @valgtBruger.Adresse</p>
                        <p><strong>Hotel:</strong> @valgtBruger.HotelNavn</p>
                        <p><strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()</p>
                        <p><strong>Slutdato:</strong> @(valgtBruger.SlutDato?.ToShortDateString() ?? "Ikke angivet")</p>
                        <p><strong>Skoleperiode:</strong> @HentSkoleperiode(valgtBruger)</p>
                        <p><strong>Skoleforløb:</strong> @HentSkoleforloeb(valgtBruger)</p>
                        <p><strong>Rolle:</strong> <span class="role-tag @GetRoleClass(valgtBruger.Role)">@valgtBruger.Role</span></p>

                        @* Tilføj denne knap her *@
                        @if (valgtBruger.Role?.ToLower() == "elev" && valgtBruger.ElevplanId.HasValue)
                        {
                            <p>
                                <button class="btn btn-primary" @onclick="() => SeElevplan(valgtBruger.ElevplanId.Value)">📄 Se elevplan</button>
                            </p>
                        }
                    }

                }
            </ChildContent>


    <FooterContent>
        @if (valgtBruger is not null)
        {
            @if (!isEditing)
            {
                <button class="btn btn-warning" @onclick="() => isEditing = true">Rediger</button>
            }
            else
            {
                <button class="btn btn-success me-2" @onclick="GemRedigering">Gem</button>
                <button class="btn btn-outline-secondary" @onclick="() => isEditing = false">Annuller</button>
            }

            <button class="btn btn-danger ms-2" @onclick="SletBrugerAsync">Slet</button>
            <button class="btn btn-secondary ms-2" @onclick="LukDetaljer">Luk</button>
        }
    </FooterContent>
</Modal>

    }
</div>

@code {
    private List<UserModel> brugere = new();
    private UserModel? valgtBruger;
    private bool isEditing = false;
    private string søgeord = "";
    private string valgtRolle = "";
    private string valgtHotel = "";
    private int anmodningerAntal = 0;
    private List<Elevplan> elevplaner = new();
    private string ModalTitel => $"Brugerinfo: {valgtBruger?.Navn}";


    private List<string> alleHoteller = new()
    {
        "Aarhus", "Borupgaard", "Bygholm Park", "Centralværkstedet",
        "Copenhagen Portside", "H.C. Andersen Odense", "Holte",
        "Hvide Hus Aalborg", "Kellers Park", "Klarskovgaard",
        "Kolding", "Kongebrogaarden", "Køge Strand",
        "Middelfart", "Rebild Bakker", "Roskilde", "Sorø"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await HentAntalAnmodninger();

        foreach (var elev in brugere.Where(b => b.Role?.ToLower() == "elev" && b.ElevplanId.HasValue))
        {
            try
            {
                var plan = await ElevplanService.GetElevplanByIdAsync(elev.ElevplanId.Value);
                if (plan != null)
                    elevplaner.Add(plan);
            }
            catch
            {
                Console.WriteLine($"Kunne ikke hente elevplan for {elev.Username}");
            }
        }
    }

    private async Task LoadUsers()
    {
        var users = await UserService.GetAllAsync();
        if (users != null)
            brugere = users;
    }

    private async Task HentAntalAnmodninger()
    {
        var liste = await AnmodningService.GetAlleAsync();
        anmodningerAntal = liste?.Count(a => a.Status?.ToLower() == "afventer") ?? 0;
    }

    private void VisDetaljer(UserModel bruger)
    {
        valgtBruger = bruger;
        isEditing = false;
    }

    private void LukDetaljer()
    {
        valgtBruger = null;
        isEditing = false;
    }

    private async Task GemRedigering()
    {
        if (valgtBruger is not null)
        {
            await UserService.UpdateUserAsync(valgtBruger);
            isEditing = false;
        }
    }

    private async Task SletBrugerAsync()
    {
        if (valgtBruger != null)
        {
            await UserService.DeleteAsync(valgtBruger.Id);
            brugere.Remove(valgtBruger);
            valgtBruger = null;
        }
    }

    private void SeElevplan(int elevplanId) => NavManager.NavigateTo($"/delmaal/{elevplanId}");

    private string HentSkoleperiode(UserModel bruger)
    {
        var plan = elevplaner.FirstOrDefault(p => p.Id == bruger.ElevplanId);
        return plan?.Skoleperiode ?? "Ikke angivet";
    }

    private string HentSkoleforloeb(UserModel bruger)
    {
        var plan = elevplaner.FirstOrDefault(p => p.Id == bruger.ElevplanId);
        return plan?.SkoleForløb ?? "Ikke angivet";
    }

    private string GetImageUrl(int id) => $"https://localhost:7013/uploads/{id}.jpg";

    private string GetRoleClass(string? role) => role?.ToLower() switch
    {
        "admin" => "role-admin",
        "elev" => "role-elev",
        "kok" => "role-kok",
        _ => "role-ukendt"
    };
}