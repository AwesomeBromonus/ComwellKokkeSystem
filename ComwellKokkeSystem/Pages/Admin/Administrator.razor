@page "/administrator"
@inject IUserService UserService
@inject NavigationManager NavManager
@inject UserState UserState
@using Modeller
@using ComwellKokkeSystem.Service

<div class="container mt-4">
    <h3 class="mb-3">📊 Administratorpanel</h3>

    @if (!UserState.IsLoggedInChecked)
    {
        <p>⏳ Indlæser brugerstatus...</p>
    }
    else if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning">🔒 Du skal være logget ind for at se denne side.</div>
    }
    else if (UserState.Role?.ToLower() != "admin")
    {
        <div class="alert alert-danger">🚫 Adgang nægtet – kun administratorer har adgang til denne side.</div>
    }
    else
    {
        <div class="alert alert-success">
            ✅ Velkommen, <strong>@UserState.Username</strong>! Du er logget ind som administrator.
        </div>

        <div class="row mt-4 mb-4">
            <div class="col-md-6">
                <p class="fw-semibold">🔧 Administrative funktioner:</p>
                <div class="d-grid gap-3">
                    <button class="btn btn-primary btn-lg shadow" @onclick='() => NavManager.NavigateTo("/opretuser")'>
                        <i class="bi bi-person-plus-fill"></i> Opret bruger
                    </button>
                    <button class="btn btn-success btn-lg shadow" @onclick='() => NavManager.NavigateTo("/opret-elevplan")'>
                        <i class="bi bi-journal-plus"></i> Opret elevplan
                    </button>
                </div>
            </div>
            <div class="col-md-6">
                <p class="fw-semibold">📈 Brugertællere:</p>
                <div class="d-flex flex-wrap gap-2">
                    <span class="badge bg-secondary">👤 Alle: @brugere.Count</span>
                    <span class="badge bg-success">🧑‍🎓 Elever: @brugere.Count(x => x.Role?.ToLower() == "elev")</span>
                    <span class="badge bg-warning text-dark">👨‍🍳 Kokke: @brugere.Count(x => x.Role?.ToLower() == "kok")</span>
                    <span class="badge bg-danger">🛡️ Admins: @brugere.Count(x => x.Role?.ToLower() == "admin")</span>
                    <span class="badge bg-info text-dark">🧾 HR: @brugere.Count(x => x.Role?.ToLower() == "hr")</span>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <input class="form-control" placeholder="🔍 Søg efter brugernavn..." @bind="søgeord" />
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                <label>Filtrer efter hotel</label>
                <select class="form-control" @bind="valgtHotelFilter">
                    <option value="">Alle hoteller</option>
                    @foreach (var hotel in brugere.Select(b => b.HotelNavn).Where(n => !string.IsNullOrWhiteSpace(n)).Distinct())
                    {
                        <option value="@hotel">@hotel</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <label>Filtrer efter rolle</label>
                <select class="form-control" @bind="valgtRolleFilter">
                    <option value="">Alle roller</option>
                    @foreach (var rolle in brugere.Select(b => b.Role).Where(r => !string.IsNullOrWhiteSpace(r)).Distinct())
                    {
                        <option value="@rolle">@rolle</option>
                    }
                </select>
            </div>
        </div>

        <div class="row">
            @foreach (var b in brugere
           .Where(b =>
           (string.IsNullOrWhiteSpace(søgeord) || b.Username.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
           (string.IsNullOrWhiteSpace(valgtHotelFilter) || b.HotelNavn == valgtHotelFilter) &&
           (string.IsNullOrWhiteSpace(valgtRolleFilter) || b.Role?.ToLower() == valgtRolleFilter.ToLower())))
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card user-card mb-3 shadow-sm" @onclick="() => VisDetaljer(b)" style="cursor:pointer;">
                        <div class="card-body">
                            <h5 class="card-title">@b.Navn</h5>
                            <p class="card-text text-muted mb-1">@b.Username</p>
                            @if (!string.IsNullOrWhiteSpace(b.HotelNavn))
                            {
                                <p class="card-text"><i class="bi bi-building"></i> @b.HotelNavn</p>
                            }
                            <span class="badge @GetRoleColor(b.Role)">🧷 @b.Role</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (valgtBruger != null)
        {
            <div class="modal show fade d-block" tabindex="-1" style="z-index: 9999; background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">👤 Brugerinfo: @valgtBruger.Username</h5>
                            <button type="button" class="btn-close" @onclick="LukDetaljer"></button>
                        </div>
                        <div class="modal-body">
                            <p><strong>Navn:</strong> @valgtBruger.Navn</p>
                            <p><strong>Email:</strong> @valgtBruger.Email</p>
                            <p><strong>Telefon:</strong> @valgtBruger.Tlf</p>
                            <p><strong>Adresse:</strong> @valgtBruger.Adresse</p>
                            <p><strong>Hotel:</strong> @valgtBruger.HotelNavn</p>

                            @if (valgtBruger.Role?.ToLower() == "elev")
                            {
                                @if (!redigeringsMode)
                                {
                                    <p>
                                        <strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()<br />
                                        <strong>Slutdato:</strong> @(valgtBruger.SlutDato?.ToShortDateString() ?? "Ikke angivet")<br />
                                        <strong>Skoleperiode:</strong> @HentSkoleperiode(valgtBruger)

                                        <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="ÅbnRediger" title="Rediger">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                    </p>
                                }
                                else
                                {
                                    <div class="mb-2">
                                        <label class="form-label mb-1">Startdato:</label>
                                        <input type="date" class="form-control" @bind="valgtBruger.StartDato" />

                                        <label class="form-label mt-3 mb-1">Slutdato:</label>
                                        <input type="date" class="form-control" @bind="valgtBruger.SlutDato" />

                                        @if (!string.IsNullOrWhiteSpace(datoFejl))
                                        {
                                            <div class="text-danger mt-2">@datoFejl</div>
                                        }

                                        <div class="mt-3">
                                            <button class="btn btn-success btn-sm" @onclick="GemDatoer">Gem</button>
                                            <button class="btn btn-secondary btn-sm ms-2" @onclick="LukRediger">Annullér</button>
                                        </div>
                                    </div>
                                }
                            }

                            else
                            {
                                <p><strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()</p>
                            }

                            <p><strong>Rolle:</strong> <span class="badge @GetRoleColor(valgtBruger.Role)">@valgtBruger.Role</span></p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="LukDetaljer">Luk</button>
                            <button class="btn btn-danger" @onclick="SletBrugerAsync">Slet</button>

                            @if (valgtBruger.Role?.ToLower() == "elev" && valgtBruger.ElevplanId > 0)
                            {
                                <button class="btn btn-info" @onclick="() => SeElevplan(valgtBruger.ElevplanId.Value)">
                                    Se elevplan
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }

    }
</div>

@code {
    private List<UserModel> brugere = new();
    private UserModel? valgtBruger;
    private string søgeord = "";
    private string valgtHotelFilter = "";
    private string valgtRolleFilter = "";
    private bool redigeringsMode = false;
    private string datoFejl = "";

    // Tilføjelse af Elevplan objectet
    private Dictionary<int, Elevplan> elevplaner = new();

    private string besked = "";
    private string beskedType = ""; // "success" eller "danger"

    protected override async Task OnInitializedAsync()
    {
        try
        {
            brugere = await UserService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fejl ved indlæsning af brugere: " + ex.Message);
            brugere = new List<UserModel>();
        }


    }

    void VisDetaljer(UserModel bruger)
    {
        valgtBruger = bruger;
        redigeringsMode = false;
        datoFejl = "";
    }

    void LukDetaljer()
    {
        valgtBruger = null;
        redigeringsMode = false;
        datoFejl = "";
    }

    void ÅbnRediger() => redigeringsMode = true;
    void LukRediger() => redigeringsMode = false;

  

    private async Task GemDatoer()
    {
        datoFejl = "";
        besked = "";

        if (valgtBruger != null)
        {
            if (valgtBruger.SlutDato != null && valgtBruger.SlutDato < valgtBruger.StartDato)
            {
                datoFejl = "❌ Slutdato må ikke være før startdato.";
                return;
            }

            try
            {
                await UserService.UpdateUserAsync(valgtBruger);
                redigeringsMode = false;
                besked = "✅ Datoer blev gemt korrekt.";
                beskedType = "success";
            }
            catch (Exception ex)
            {
                datoFejl = "❌ Der opstod en fejl ved opdatering.";
                Console.WriteLine($"Fejl i GemDatoer: {ex.Message}");
                besked = "❌ Fejl under opdatering af brugerdata.";
                beskedType = "danger";
            }
        }
    }


    private async Task SletBrugerAsync()
    {
        if (valgtBruger != null)
        {
            await UserService.DeleteAsync(valgtBruger.Id);
            brugere.Remove(valgtBruger);
            valgtBruger = null;

        }
    }

    private void SeElevplan(int elevplanId)
    {
        NavManager.NavigateTo($"/delmaal/{elevplanId}");
    }

    private string GetRoleColor(string role) => role?.ToLower() switch
    {
        "admin" => "bg-danger",
        "elev" => "bg-success",
        "kok" => "bg-warning text-dark",
        "hr" => "bg-info text-dark",
        _ => "bg-secondary"
    };
    private string HentSkoleperiode(UserModel bruger)
    {
        if (bruger.Role?.ToLower() == "elev" && elevplaner.TryGetValue(bruger.Id, out var plan))
            return plan.Skoleperiode;

        return "Ikke tilgængelig";
    }

}
