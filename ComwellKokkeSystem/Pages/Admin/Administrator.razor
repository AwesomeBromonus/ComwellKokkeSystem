@page "/administrator"
@using Modeller
@using ComwellKokkeSystem.Service
@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserState UserState
@inject IAnmodningService AnmodningService

<link href="css/panel.css" rel="stylesheet" />

<div class="admin-container">
    @if (!UserState.IsLoggedInChecked)
    {
        <p class="text-center py-4">⏳ Indlæser brugerstatus...</p>
    }
    else if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning text-center">🔒 Du skal være logget ind for at se denne side.</div>
    }
    else if (UserState.Role?.ToLower() != "admin")
    {
        <div class="alert alert-danger text-center">🚫 Adgang nægtet – kun administratorer har adgang.</div>
    }
    else
    {
        <!-- 🔝 Header med badges -->
        <div class="topbar">
            <h2>🛠 Administratorpanel – Velkommen, @UserState.Username!</h2>
            <div class="badge-row">
                <span class="badge">👥 Brugere: @brugere.Count</span>
                <span class="badge">🧑‍🎓 Elever: @brugere.Count(b => b.Role?.ToLower() == "elev")</span>
                <button class="badge clickable" @onclick='() => NavManager.NavigateTo("/anmodninger")'>
                    🔔 Anmodninger: @anmodningerAntal
                </button>
            </div>
        </div>

        <!-- 📊 Statistik -->
        <div class="stat-cards">
            <div class="stat-card">👥 <strong>@brugere.Count</strong><br />Total Brugere</div>
            <div class="stat-card clickable" @onclick='() => NavManager.NavigateTo("/anmodninger")'>
                📥 <strong>@anmodningerAntal</strong><br />Nye Anmodninger
            </div>
        </div>

        <!-- 🚀 Hurtige funktioner -->
        <div class="action-grid">
            @foreach (var p in panels)
            {
                <div class="action-box" @onclick='() => NavManager.NavigateTo(p.Route)'>
                    <i class="@p.Icon icon-large"></i>
                    <h5>@p.Title</h5>
                    <p class="action-desc">@p.ActionText</p>
                </div>
            }
        </div>

        <!-- 🔍 Søgning & Filter -->
        <div class="search-filter">
            <input class="input-text" placeholder="🔍 Søg brugernavn..." @bind="søgeord" />
            <select class="input-select" @bind="valgtRolle">
                <option value="">Alle roller</option>
                <option value="elev">Elev</option>
                <option value="admin">Admin</option>
                <option value="kok">Kok</option>
                <option value="hr">HR</option>
            </select>
        </div>

        <!-- 👤 Brugerkort -->
        <div class="user-card-grid">
            @foreach (var b in brugere.Where(b =>
           (string.IsNullOrWhiteSpace(søgeord) || b.Username.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
           (string.IsNullOrWhiteSpace(valgtRolle) || b.Role?.ToLower() == valgtRolle)))
            {
                <div class="user-card" @onclick="@(() => VisDetaljer(b))">
                    <h5>@b.Navn</h5>
                    <p>@b.Username</p>
                    <span class="role-tag @GetRoleClass(b.Role)">🧷 @b.Role</span>
                </div>
            }
        </div>

        <!-- 🧾 Modal popup -->
        @if (valgtBruger is not null)
        {
            <div class="modal-backdrop" style="z-index: 999;">
                <div class="modal" style="z-index: 1000;">
                    <div class="modal-header">
                        <h4>👤 Detaljer: @valgtBruger.Username</h4>
                        <button class="close-btn" @onclick="LukDetaljer">×</button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Navn:</strong> @valgtBruger.Navn</p>
                        <p><strong>Email:</strong> @valgtBruger.Email</p>
                        <p><strong>Telefon:</strong> @valgtBruger.Tlf</p>
                        <p><strong>Adresse:</strong> @valgtBruger.Adresse</p>
                        <p><strong>Hotel:</strong> @valgtBruger.HotelId</p>
                        <p><strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()</p>
                        <p><strong>Rolle:</strong> <span class="role-tag @GetRoleClass(valgtBruger.Role)">@valgtBruger.Role</span></p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="LukDetaljer">Luk</button>
                        <button class="btn btn-danger" @onclick="SletBrugerAsync">Slet</button>
                        @if (valgtBruger.Role?.ToLower() == "elev" && valgtBruger.ElevplanId > 0)
                        {
                            <button class="btn btn-info" @onclick='() => SeElevplan(valgtBruger.ElevplanId.Value)'>Se elevplan</button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<UserModel> brugere = new();
    private UserModel? valgtBruger;
    private string søgeord = "";
    private string valgtRolle = "";
    private int anmodningerAntal = 0;

    private record PanelInfo(string Icon, string Title, string Route, string ActionText);
    private List<PanelInfo> panels = new()
    {
        new("fa fa-user-plus", "Opret Bruger", "/opretuser", "Opret ny systembruger"),
        new("fa fa-file-alt", "Elevplaner", "/opret-elevplan", "Administrer elevplaner"),
        new("fa fa-layer-group", "Delmål", "/delmaalskabeloner", "Rediger skabeloner"),
        new("fa fa-chart-bar", "Rapporter", "/rapportside", "Se statistik"),
        new("fa fa-inbox", "Anmodninger", "/anmodninger", "Ventende godkendelser"),
        new("fa fa-comments", "Chat", "/messages", "Åben beskeder"),
        new("fa fa-book", "Læring", "/laering", "Materialer og guides")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await HentAntalAnmodninger();
    }

    private async Task LoadUsers()
    {
        try
        {
            var users = await Http.GetFromJsonAsync<List<UserModel>>("api/users/all");
            if (users is not null)
                brugere = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fejl ved indlæsning af brugere: " + ex.Message);
        }
    }

    private async Task HentAntalAnmodninger()
    {
        try
        {
            var alle = await AnmodningService.GetAlleAsync();
            if (alle is not null)
                anmodningerAntal = alle.Count(a => a.Status?.ToLower() == "afventer");
        }
        catch
        {
            anmodningerAntal = 0;
        }
    }

    private void VisDetaljer(UserModel bruger) => valgtBruger = bruger;
    private void LukDetaljer() => valgtBruger = null;

    private async Task SletBrugerAsync()
    {
        if (valgtBruger is not null)
        {
            var response = await Http.DeleteAsync($"api/users/{valgtBruger.Id}");
            if (response.IsSuccessStatusCode)
            {
                brugere.Remove(valgtBruger);
                valgtBruger = null;
            }
        }
    }

    private void SeElevplan(int elevplanId) => NavManager.NavigateTo($"/delmaal/{elevplanId}");

    private string GetRoleClass(string? role) => role?.ToLower() switch
    {
        "admin" => "role-admin",
        "elev" => "role-elev",
        "kok" => "role-kok",
        "hr" => "role-hr",
        _ => "role-ukendt"
    };
}
