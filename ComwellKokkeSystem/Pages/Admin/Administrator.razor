@page "/administrator"
@inject IUserService UserService
@inject IElevplanService ElevplanService
@inject IAnmodningService AnmodningService
@inject NavigationManager NavManager
@inject UserState UserState

@using Modeller
@using ComwellKokkeSystem.Service

<link href="css/Panel.css" rel="stylesheet" />

<div class="admin-container">
    @if (!UserState.IsLoggedInChecked)
    {
        <p class="loading-text">⏳ Indlæser brugerstatus...</p>
    }
    else if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning">🔒 Du skal være logget ind for at se denne side.</div>
    }
    else if (UserState.Role?.ToLower() != "admin")
    {
        <div class="alert alert-danger">🚫 Adgang nægtet – kun administratorer har adgang.</div>
    }
    else
    {
        <!-- ✅ Adminpanel start -->
        <div class="admin-header">
            <div class="admin-header-top">
                <h2>🛠 Administratorpanel – velkommen, <span class="username">@UserState.Navn</span>!</h2>
            </div>
        </div>

        <!-- 🧩 Quick actions -->
        <div class="dashboard-cards">
            <div class="dashboard-card" @onclick="@(() => NavManager.NavigateTo("/opretuser"))">
                <div class="icon">👤</div>
                <h4>Opret bruger</h4>
                <p>Tilføj ny systembruger</p>
            </div>
            <div class="dashboard-card" @onclick="@(() => NavManager.NavigateTo("/opret-elevplan"))">
                <div class="icon">📋</div>
                <h4>Opret elevplan</h4>
                <p>Opret og tildel elevplan</p>
            </div>
            <div class="dashboard-card highlight" @onclick="@(() => NavManager.NavigateTo("/anmodninger"))">
                <div class="icon">📥</div>
                <h4>Anmodninger</h4>
                <p><strong>@anmodningerAntal</strong> afventer godkendelse</p>
            </div>
        </div>

        <!-- 🔍 Filtrering -->
        <div class="search-section">
            <input class="search-input" placeholder="🔍 Søg brugernavn..." @bind="søgeord" />
            <select class="role-filter" @bind="valgtRolle">
                <option value="">Alle roller</option>
                <option value="elev">Elev</option>
                <option value="admin">Administrator</option>
                <option value="kok">Kok</option>
                <option value="hr">HR</option>
            </select>
            <select class="role-filter" @bind="valgtHotel">
                <option value="">Alle hoteller</option>
                @foreach (var hotel in alleHoteller)
                {
                    <option value="@hotel">@hotel</option>
                }
            </select>
        </div>

        <!-- 👥 Brugerkort -->
        <div class="user-grid">
            @foreach (var b in brugere.Where(b =>
           (string.IsNullOrWhiteSpace(søgeord) || b.Username.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
           (string.IsNullOrWhiteSpace(valgtRolle) || b.Role?.ToLower() == valgtRolle) &&
           (string.IsNullOrWhiteSpace(valgtHotel) || b.HotelNavn == valgtHotel)))
            {
                <div class="user-card" @onclick="@(() => VisDetaljer(b))">
                    <div class="user-content">
                        <div class="user-info">
                            <h5 class="user-name">@b.Navn</h5>
                            <span class="role-tag @GetRoleClass(b.Role)">@b.Role</span>
                        </div>
                        <img src="@GetImageUrl(b.Id)" onerror="this.style.display='none';"
                             class="user-image rounded-circle" width="64" height="64" alt="" />
                    </div>
                </div>
            }
        </div>

        <!-- 🪟 Modal med redigeringsmulighed -->
        @if (valgtBruger is not null)
        {
            <div class="modal-backdrop">
                <div class="modal-window">
                    <div class="modal-header">
                        <h5>👤 Brugerinfo: @valgtBruger.Navn</h5>
                        <button class="btn-close" @onclick="LukDetaljer">×</button>
                    </div>
                    <div class="modal-body">
                        @if (!isEditing)
                        {
                            <p><strong>Navn:</strong> @valgtBruger.Navn</p>
                            <p><strong>Email:</strong> @valgtBruger.Email</p>
                            <p><strong>Telefon:</strong> @valgtBruger.Tlf</p>
                            <p><strong>Adresse:</strong> @valgtBruger.Adresse</p>
                            <p><strong>Hotel:</strong> @valgtBruger.HotelNavn</p>
                            <p><strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()</p>
                            <p><strong>Slutdato:</strong> @valgtBruger.SlutDato?.ToShortDateString()</p>
                            <p><strong>Skoleperiode:</strong> @HentSkoleperiode(valgtBruger)</p>
                            <p><strong>Skoleforløb:</strong> @HentSkoleforloeb(valgtBruger)</p>
                            <p><strong>Rolle:</strong> <span class="role-tag @GetRoleClass(valgtBruger.Role)">@valgtBruger.Role</span></p>
                        }
                        else
                        {
                            <!-- Redigérfelter -->
                            <InputText class="form-control mb-2" @bind-Value="valgtBruger.Navn" placeholder="Navn" />
                            <InputText class="form-control mb-2" @bind-Value="valgtBruger.Email" placeholder="Email" />
                            <InputText class="form-control mb-2" @bind-Value="valgtBruger.Tlf" placeholder="Telefon" />
                            <InputText class="form-control mb-2" @bind-Value="valgtBruger.Adresse" placeholder="Adresse" />
                            <select class="form-control mb-2" @bind="valgtBruger.HotelNavn">
                                @foreach (var h in alleHoteller)
                                {
                                    <option value="@h">@h</option>
                                }
                            </select>
                            <InputDate class="form-control mb-2" @bind-Value="valgtBruger.StartDato" />
                            <InputDate class="form-control mb-2" @bind-Value="valgtBruger.SlutDato" />
                            <InputText class="form-control mb-2" @bind-Value="valgtBruger.Role" placeholder="Rolle" />
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="LukDetaljer">Luk</button>
                        <button class="btn btn-danger" @onclick="SletBrugerAsync">Slet</button>

                        @if (!isEditing)
                        {
                            <button class="btn btn-warning" @onclick="() => isEditing = true">✏️ Rediger</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="GemRedigering">💾 Gem ændringer</button>
                            <button class="btn btn-light" @onclick="() => isEditing = false">Annuller</button>
                        }

                        @if (valgtBruger.Role?.ToLower() == "elev" && valgtBruger.ElevplanId > 0)
                        {
                            <button class="btn btn-info" @onclick="@(() => SeElevplan(valgtBruger.ElevplanId.Value))">Se elevplan</button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<UserModel> brugere = new();
    private UserModel? valgtBruger;
    private bool isEditing = false;

    private string søgeord = "";
    private string valgtRolle = "";
    private string valgtHotel = "";
    private int anmodningerAntal = 0;
    private List<Elevplan> elevplaner = new();

    private List<string> alleHoteller = new()
    {
        "Aarhus", "Borupgaard", "Bygholm Park", "Centralværkstedet",
        "Copenhagen Portside", "H.C. Andersen Odense", "Holte",
        "Hvide Hus Aalborg", "Kellers Park", "Klarskovgaard",
        "Kolding", "Kongebrogaarden", "Køge Strand",
        "Middelfart", "Rebild Bakker", "Roskilde", "Sorø"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await HentAntalAnmodninger();

        foreach (var elev in brugere.Where(b => b.Role?.ToLower() == "elev" && b.ElevplanId.HasValue))
        {
            try
            {
                var plan = await ElevplanService.GetElevplanByIdAsync(elev.ElevplanId.Value);
                if (plan != null)
                    elevplaner.Add(plan);
            }
            catch
            {
                Console.WriteLine($"❌ Kunne ikke hente elevplan for {elev.Username}");
            }
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            var users = await UserService.GetAllAsync();
            if (users is not null)
                brugere = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine("🚫 Fejl ved indlæsning af brugere: " + ex.Message);
        }
    }

    private async Task HentAntalAnmodninger()
    {
        try
        {
            var liste = await AnmodningService.GetAlleAsync();
            anmodningerAntal = liste?.Count(a => a.Status?.ToLower() == "afventer") ?? 0;
        }
        catch
        {
            anmodningerAntal = 0;
        }
    }

    private string GetRoleClass(string? role) => role?.ToLower() switch
    {
        "admin" => "role-admin",
        "elev" => "role-elev",
        "kok" => "role-kok",
        _ => "role-ukendt"
    };

    private void VisDetaljer(UserModel bruger)
    {
        valgtBruger = bruger;
        isEditing = false;
    }

    private void LukDetaljer()
    {
        valgtBruger = null;
        isEditing = false;
    }

    private async Task GemRedigering()
    {
        if (valgtBruger is not null)
        {
            await UserService.UpdateUserAsync(valgtBruger);
            isEditing = false;
        }
    }

    private async Task SletBrugerAsync()
    {
        if (valgtBruger != null)
        {
            await UserService.DeleteAsync(valgtBruger.Id);
            brugere.Remove(valgtBruger);
            valgtBruger = null;
        }
    }

    private void SeElevplan(int elevplanId) => NavManager.NavigateTo($"/delmaal/{elevplanId}");

    private string HentSkoleperiode(UserModel bruger)
    {
        var plan = elevplaner.FirstOrDefault(p => p.Id == bruger.ElevplanId);
        return plan?.Skoleperiode ?? "Ikke angivet";
    }

    private string HentSkoleforloeb(UserModel bruger)
    {
        var plan = elevplaner.FirstOrDefault(p => p.Id == bruger.ElevplanId);
        return plan?.SkoleForløb ?? "Ikke angivet";
    }

    private string GetImageUrl(int id) => $"https://localhost:7013/uploads/{id}.jpg";
}
