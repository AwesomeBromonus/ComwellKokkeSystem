@page "/administrator"
@inject IUserService UserService
@inject NavigationManager NavManager
@inject UserState UserState
@using Modeller
@using ComwellKokkeSystem.Service

<link href="css/Panel.css" rel="stylesheet" />

<div class="dashboard-main">
    @if (!UserState.IsLoggedInChecked)
    {
        <p class="loading-text">⏳ Indlæser brugerstatus...</p>
    }
    else if (!UserState.IsLoggedIn)
    {
        <div class="alert alert-warning">🔒 Du skal være logget ind for at se denne side.</div>
    }
    else if (UserState.Role?.ToLower() != "admin")
    {
        <div class="alert alert-danger">🚫 Adgang nægtet – kun administratorer har adgang.</div>
    }
    else
    {
        <h1 class="dashboard-title">Administratorpanel</h1>

        <!-- Panel med action-kort -->
        <div class="dashboard-actions">
            @foreach (var panel in panels)
            {
                <div class="action-card">
                    <i class="@panel.Icon"></i>
                    <p>@panel.Title</p>
                    <button @onclick="() => NavManager.NavigateTo(panel.Route)">@panel.ActionText</button>
                </div>
            }
        </div>

        <!-- Brugerliste -->
        <div class="search-filter">
            <input class="search-bar" placeholder="🔍 Søg brugernavn..." @bind="søgeord" />
            <select class="filter-dropdown" @bind="valgtRolle">
                <option value="">Alle roller</option>
                <option value="elev">Elev</option>
                <option value="admin">Admin</option>
                <option value="kok">Kok</option>
                <option value="hr">HR</option>
            </select>
        </div>

        <div class="user-grid">
            @foreach (var b in brugere.Where(b =>
           (string.IsNullOrWhiteSpace(søgeord) || b.Username.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
           (string.IsNullOrWhiteSpace(valgtRolle) || b.Role?.ToLower() == valgtRolle)))
            {
                <div class="user-card" @onclick="() => VisDetaljer(b)">
                    <h5 class="card-title">@b.Navn</h5>
                    <p class="card-text">@b.Username</p>
                    <span class="role-tag @GetRoleClass(b.Role)">🧷 @b.Role</span>
                </div>
            }
        </div>

        <!-- Modal -->
        @if (valgtBruger != null)
        {
            <div class="modal-backdrop">
                <div class="modal-window">
                    <div class="modal-header">
                        <h5>👤 Brugerinfo: @valgtBruger.Username</h5>
                        <button class="btn-close" @onclick="LukDetaljer">×</button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Navn:</strong> @valgtBruger.Navn</p>
                        <p><strong>Email:</strong> @valgtBruger.Email</p>
                        <p><strong>Telefon:</strong> @valgtBruger.Tlf</p>
                        <p><strong>Adresse:</strong> @valgtBruger.Adresse</p>
                        <p><strong>Hotel ID:</strong> @valgtBruger.HotelId</p>
                        <p><strong>Startdato:</strong> @valgtBruger.StartDato.ToShortDateString()</p>
                        <p><strong>Rolle:</strong> <span class="role-tag @GetRoleClass(valgtBruger.Role)">@valgtBruger.Role</span></p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="LukDetaljer">Luk</button>
                        <button class="btn btn-danger" @onclick="SletBrugerAsync">Slet</button>
                        @if (valgtBruger.Role?.ToLower() == "elev" && valgtBruger.ElevplanId > 0)
                        {
                            <button class="btn btn-info" @onclick="() => SeElevplan(valgtBruger.ElevplanId.Value)">Se elevplan</button>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<UserModel> brugere = new();
    private UserModel? valgtBruger;
    private string søgeord = "";
    private string valgtRolle = "";

    private record PanelInfo(string Icon, string Title, string Route, string ActionText);
    private List<PanelInfo> panels = new()
    {
        new("fa fa-user-plus", "Opret Bruger", "/opretuser", "Gå til"),
        new("fa fa-file-alt", "Opret Elevplan", "/opret-elevplan", "Gå til"),
        new("fa fa-chart-bar", "Rapporter", "/rapportside", "Se rapporter"),
        new("fa fa-inbox", "Anmodninger", "/anmodninger", "Se anmodninger"),
        new("fa fa-layer-group", "Delmålsskabeloner", "/delmaalskabeloner", "Se skabeloner"),
        new("fa fa-book", "Læring", "/laering", "Se læring"),
        new("fa fa-comments", "Chat", "/messages", "Åbn chat")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var users = await UserService.GetAllAsync();
            if (users != null)
                brugere = users;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fejl ved indlæsning af brugere: " + ex.Message);
            brugere = new List<UserModel>();
        }
    }

    void VisDetaljer(UserModel bruger) => valgtBruger = bruger;
    void LukDetaljer() => valgtBruger = null;

    private async Task SletBrugerAsync()
    {
        if (valgtBruger != null)
        {
            await UserService.DeleteAsync(valgtBruger.Id);
            brugere.Remove(valgtBruger);
            valgtBruger = null;



        }
    }

    private void SeElevplan(int elevplanId) => NavManager.NavigateTo($"/delmaal/{elevplanId}");

    private string GetRoleClass(string role) => role?.ToLower() switch
    {
        "admin" => "role-admin",
        "elev" => "role-elev",
        "kok" => "role-kok",
        "hr" => "role-hr",
        _ => "role-ukendt"
    };
}
