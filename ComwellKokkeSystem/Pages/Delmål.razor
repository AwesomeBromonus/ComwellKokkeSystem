@page "/delmaal/{elevplanId:int}"
@using Modeller
@inject IDelmaalService DelmaalService
@inject IElevplanService ElevplanService
@inject NavigationManager Nav

<h3 class="text-xl font-bold mb-4">Delmål for Elevplan @elevplanId</h3>

@if (praktikperiodeIds == null)
{
    <p>Indlæser praktikperioder...</p>
}
else
{
    <div class="mb-4">
        @foreach (var praktikId in praktikperiodeIds)
        {
            <button class="btn btn-outline-primary me-2 mb-2"
                    @onclick="() => VisDelmaal(praktikId)">
                Praktikperiode @praktikId
            </button>
        }
    </div>

    @if (valgtPraktikId != 0 && delmaalListe != null)
    {
        @if (delmaalListe.Any())
        {
            <ul class="list-group">
                @foreach (var d in delmaalListe)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@d.Beskrivelse</strong>
                            <div class="text-muted">Deadline: @d.Deadline.ToShortDateString()</div>
                        </div>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input"
                                   checked="@IsFuldført(d)"
                                   @onchange="() => ToggleStatus(d)" />
                            <label class="form-check-label">@d.Status</label>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>Ingen delmål fundet for praktikperiode @valgtPraktikId.</p>
        }
    }

    <button class="btn btn-secondary mt-4" @onclick="Tilbage">Tilbage</button>
}

@code {
    [Parameter] public int elevplanId { get; set; }

    private List<int>? praktikperiodeIds;
    private List<Modeller.Delmål>? delmaalListe;
    private int valgtPraktikId = 0;

    protected override async Task OnInitializedAsync()
    {
        var plan = await ElevplanService.GetElevplanByIdAsync(elevplanId);
        praktikperiodeIds = plan?.PraktikperiodeIds ?? new();
    }

    private async Task VisDelmaal(int praktikperiodeId)
    {
        valgtPraktikId = praktikperiodeId;
        delmaalListe = await DelmaalService.GetByPraktikperiodeIdAsync(praktikperiodeId);
    }

    private bool IsFuldført(Modeller.Delmål d) => d.Status == "Fuldført";

    private async Task ToggleStatus(Modeller.Delmål d)
    {
        d.Status = d.Status == "Fuldført" ? "Ikke fuldført" : "Fuldført";
        await DelmaalService.UpdateDelmaalAsync(d);
    }

    private void Tilbage()
    {
        Nav.NavigateTo("/elevplaner");
    }
}
