@page "/rapportside"
@using Modeller
@using ComwellKokkeSystem.Service
@using System
@inject IGenereRapportService RapportService 
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 

<h3>HR Rapport</h3>

@if (!isAdmin)
{
    <p>Adgang nægtet. Kun admins kan se denne side.</p>
}
else if (praktikperioder == null || delmål == null || brugere == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    // Plan for rapportvisning: Vise data i tabeller og tilbyde eksportmuligheder.
    <h4>Praktikperioder</h4>
    <select @onchange="ChangeYear">
        <option value="2025">2025</option>
        <option value="2026">2026</option>
        <option value="2027">2027</option>
    </select>
    
    <div class="mt-4">
        <button class="btn btn-primary me-2" @onclick="ExportToCsv">Eksporter til CSV</button>
        <button class="btn btn-success" @onclick="ExportToExcel">Eksporter til Excel</button>
    </div>
    
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Navn</th>
                <th>Start Dato</th>
                <th>Slut Dato</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var periode in praktikperioder)
            {
                <tr>
                    <td>@periode.Navn</td>
                    <td>@(periode.StartDato.ToString("dd/MM/yyyy") ?? "Ingen dato")</td>
                    <td>@(periode.SlutDato.ToString("dd/MM/yyyy") ?? "Ingen dato")</td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Delmål Deadlines</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Beskrivelse</th>
                <th>Deadline</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dm in delmål)
            {
                <tr>
                    <td>@dm.Beskrivelse</td>
                    <td>@(dm.Deadline.ToString("dd/MM/yyyy") ?? "Ingen dato")</td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Nye Brugere</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Navn</th>
                <th>Start Dato</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bruger in brugere)
            {
                <tr>
                    <td>@bruger.Navn</td>
                    <td>@(bruger.StartDato.ToString("dd/MM/yyyy") ?? "Ingen dato")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // Plan for rapportside: Håndtere visning og eksport af HR-data baseret på år og brugerrolle.
    private List<Praktikperiode>? praktikperioder;
    private List<Modeller.Delmål>? delmål;
    private List<UserModel>? brugere;
    private int selectedYear = 2025;
    private bool isAdmin = false;

    // Udfører initialisering og autorisationskontrol ved sidenindlæsning.
    protected override async Task OnInitializedAsync()
    {
        var role = await AuthService.GetCurrentUserRoleAsync();
        Console.WriteLine($"Brugerrolle: {role}"); // Til debugging
        if (string.IsNullOrEmpty(role) || !role.Equals("Admin", StringComparison.OrdinalIgnoreCase))
        {
            isAdmin = false;
            NavigationManager.NavigateTo("/access-denied");
            return;
        }
        isAdmin = true;

        await LoadData();
    }

    // Udfører asynkron indlæsning af data baseret på valgt år.
    private async Task LoadData()
    {
        try
        {
            praktikperioder = await RapportService.GetPraktikPerioderAsync(selectedYear) ?? new List<Praktikperiode>();
            delmål = await RapportService.GetDelmålAsync(selectedYear) ?? new List<Modeller.Delmål>();
            brugere = await RapportService.GetBrugereAsync(selectedYear) ?? new List<UserModel>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved hentning af data: {ex.Message}");
            praktikperioder = new List<Praktikperiode>();
            delmål = new List<Delmål>();
            brugere = new List<UserModel>();
        }
    }

    // Udfører ændring af valgt år og genindlæser data.
    private async Task ChangeYear(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            selectedYear = int.Parse(e.Value.ToString());
            await LoadData();
        }
    }

    // Udfører eksport af data til CSV-fil.
    private async Task ExportToCsv()
    {
        try
        {
            var fileContent = await RapportService.ExportToCsvAsync(selectedYear);
            if (fileContent.Length > 0)
            {
                await DownloadFile("rapport.csv", "text/csv", fileContent);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved eksport til CSV: {ex.Message}");
            // Vis fejlbesked til brugeren
        }
    }

    // Udfører eksport af data til Excel-fil.
    private async Task ExportToExcel()
    {
        try
        {
            var fileContent = await RapportService.ExportToExcelAsync(selectedYear);
            if (fileContent.Length > 0)
            {
                await DownloadFile("rapport.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileContent);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved eksport til Excel: {ex.Message}");
            // Vis fejlbesked til brugeren
        }
    }

    // Udfører download af en fil ved hjælp af JavaScript-interop.
    private async Task DownloadFile(string fileName, string contentType, byte[] content)
    {
        // Vi bruger en JavaScript-funktion som allerede findes i Blazor WASM
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, content);
    }
}