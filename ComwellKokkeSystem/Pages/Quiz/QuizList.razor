@page "/quizlist"
@using ComwellKokkeSystem.Service.QuizService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject IQuizService QuizService

<div class="min-h-screen bg-gray-100 flex items-center justify-center p-6 font-sans">
    <div class="max-w-4xl w-full bg-white rounded-lg shadow-2xl p-8 border border-gray-200">
        <h3 class="text-4xl font-extrabold text-center mb-8 text-purple-700">Tilgængelige Quizzer 📚</h3>

        @if (!isAuthorizedChecked)
        {
            <p class="text-center text-lg text-gray-600">⏳ Tjekker brugerstatus...</p>
        }
        else if (!isLoggedIn)
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                <strong class="font-bold">🔒 Adgang nægtet!</strong>
                <span class="block sm:inline"> Du skal være logget ind for at se quizzer.</span>
            </div>
        }
        else
        {
            @if (quizzes == null)
            {
                <p class="text-center text-lg text-gray-600"><em>Loading quizzes...</em></p>
            }
            else if (quizzes.Any())
            {
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                        <span class="block sm:inline">@errorMessage</span>
                    </div>
                }

                <ul class="space-y-4">
                    @foreach (var quiz in quizzes)
                    {
                        <li class="bg-gray-50 p-5 rounded-xl shadow-md hover:shadow-lg transition duration-300 ease-in-out flex justify-between items-center border border-gray-200">
                            <a href="/quizdetails/@quiz.Id" class="text-2xl font-semibold text-blue-700 hover:text-blue-800 transition duration-300">@quiz.Title</a>
                            <div class="flex space-x-3">
                                <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2.5 px-5 rounded-lg shadow-sm transition duration-300 transform hover:scale-105" @onclick="() => NavigateToEdit(quiz.Id)">Rediger ✏️</button>
                                <button class="bg-red-600 hover:bg-red-700 text-white font-bold py-2.5 px-5 rounded-lg shadow-sm transition duration-300 transform hover:scale-105" @onclick="() => DeleteQuiz(quiz.Id)">Slet 🗑️</button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-center text-lg text-gray-600">Ingen quizzer tilgængelige. Hvorfor ikke <a href="/quizcreator" class="text-blue-600 hover:underline font-semibold">oprette en</a>?</p>
            }

            <div class="text-center mt-8">
                <button class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-lg shadow-xl transition duration-300 transform hover:scale-105" @onclick="NavigateToCreate">Opret Ny Quiz 🎉</button>
                <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-lg shadow-xl transition duration-300 transform hover:scale-105 ml-4" @onclick="RefreshQuizzes">Opdater Liste 🔄</button>
            </div>
        }
    </div>
</div>

@code {
    private List<Modeller.Quizzes>? quizzes;
    private int? loggedInUserId;
    private bool isAuthorizedChecked = false;
    private bool isLoggedIn = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuizzes();
    }

    private async Task LoadQuizzes()
    {
        try
        {
            loggedInUserId = await AuthService.GetCurrentUserIdAsync();
            isLoggedIn = loggedInUserId.HasValue;
            isAuthorizedChecked = true;

            if (isLoggedIn)
            {
                quizzes = await QuizService.GetAllQuizzesAsync();
            }
            else
            {
                quizzes = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved hentning af quizzer: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/quizcreator");
    }

    private void NavigateToEdit(int quizId)
    {
        NavigationManager.NavigateTo($"/quizeditor/{quizId}");
    }

    private async Task DeleteQuiz(int quizId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne quiz og alle dens spørgsmål?");
        if (confirmed)
        {
            try
            {
                Console.WriteLine($"Forsøger at slette quiz med ID: {quizId}");
                await QuizService.DeleteQuizAsync(quizId);
                await LoadQuizzes(); // Genindlæs quizzer fra serveren
                errorMessage = string.Empty;
            }
            catch (Exception ex)
            {
                errorMessage = $"Kunne ikke slette quiz: {ex.Message}";
                Console.WriteLine($"Fejl ved sletning af quiz: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
    }

    private async Task RefreshQuizzes()
    {
        await LoadQuizzes();
        StateHasChanged();
    }
}