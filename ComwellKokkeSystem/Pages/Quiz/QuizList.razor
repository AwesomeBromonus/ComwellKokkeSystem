@page "/quizlist"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService

<div class="min-h-screen bg-gray-100 flex items-center justify-center p-6 font-sans"> @* Subtil grå baggrund, centrerer indholdet *@
    <div class="max-w-4xl w-full bg-white rounded-lg shadow-2xl p-8 border border-gray-200"> @* Større og mere fremtrædende hvid boks *@
        <h3 class="text-4xl font-extrabold text-center mb-8 text-purple-700">Tilgængelige Quizzer 📚</h3> @* Kahoot-agtig farve og emoji *@

        @if (quizzes == null)
        {
            <p class="text-center text-lg text-gray-600"><em>Loading quizzes...</em></p>
        }
        else if (quizzes.Any())
        {
            <ul class="space-y-4">
                @foreach (var quiz in quizzes)
                {
                    bool isCreator = (currentLoggedInUserId == quiz.CreatorUserId);

                    <li class="bg-gray-50 p-5 rounded-xl shadow-md hover:shadow-lg transition duration-300 ease-in-out flex justify-between items-center border border-gray-200"> @* Fremtrædende kort for hver quiz *@
                        <a href="/quizdetails/@quiz.Id" class="text-2xl font-semibold text-blue-700 hover:text-blue-800 transition duration-300">@quiz.Title</a>
                        <div class="flex space-x-3"> @* Mere plads mellem knapper *@
                            @if (isCreator)
                            {
                                <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2.5 px-5 rounded-lg shadow-sm transition duration-300 transform hover:scale-105" @onclick="() => NavigateToEdit(quiz.Id)">Rediger ✏️</button>
                                <button class="bg-red-600 hover:bg-red-700 text-white font-bold py-2.5 px-5 rounded-lg shadow-sm transition duration-300 transform hover:scale-105" @onclick="() => DeleteQuiz(quiz.Id)">Slet 🗑️</button>
                            }
                            else
                            {
                                <button class="bg-gray-300 text-gray-600 font-bold py-2.5 px-5 rounded-lg cursor-not-allowed shadow-sm">Rediger</button>
                                <button class="bg-gray-300 text-gray-600 font-bold py-2.5 px-5 rounded-lg cursor-not-allowed shadow-sm">Slet</button>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-center text-lg text-gray-600">Ingen quizzer tilgængelige. Hvorfor ikke <a href="/quizcreator" class="text-blue-600 hover:underline font-semibold">oprette en</a>?</p>
        }

        <div class="text-center mt-8">
            <button class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-lg shadow-xl transition duration-300 transform hover:scale-105" @onclick="NavigateToCreate">Opret Ny Quiz 🎉</button>
        </div>
    </div>
</div>

@code {
    private List<Modeller.Quizzes>? quizzes;
    private string? currentLoggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userIdInt = await AuthService.GetCurrentUserIdAsync();
            currentLoggedInUserId = userIdInt?.ToString();

            quizzes = await Http.GetFromJsonAsync<List<Modeller.Quizzes>>("api/Quiz");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching quizzes: {ex.Message}");
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/quizcreator");
    }

    private void NavigateToEdit(int quizId)
    {
        NavigationManager.NavigateTo($"/quizeditor/{quizId}");
    }

    private async Task DeleteQuiz(int quizId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne quiz og alle dens spørgsmål?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/Quiz/{quizId}");
                if (response.IsSuccessStatusCode)
                {
                    quizzes?.RemoveAll(q => q.Id == quizId);
                    StateHasChanged();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error deleting quiz: {response.StatusCode} - {errorContent}");
                    await JSRuntime.InvokeVoidAsync("alert", $"Kunne ikke slette quiz: {response.StatusCode} - {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception during quiz deletion: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"Der skete en fejl under sletning: {ex.Message}");
            }
        }
    }
}