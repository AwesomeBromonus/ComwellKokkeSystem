@page "/quizcreator"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Create New Quiz</h3>

<EditForm Model="@newQuiz" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="quizTitle">Quiz Title:</label>
        <InputText id="quizTitle" class="form-control" @bind-Value="newQuiz.Title" />
        <ValidationMessage For="@(() => newQuiz.Title)" />
    </div>

    <h4>Questions</h4>
    @foreach (var question in questions)
    {
        var currentQuestion = question;
        <div class="card mb-3 p-3">
            <div class="form-group mb-2">
                <label for="@($"questionText_{currentQuestion.TempId}")">Question Text:</label>
                <InputText id="@($"questionText_{currentQuestion.TempId}")" class="form-control" @bind-Value="currentQuestion.Text" />
                <ValidationMessage For="@(() => currentQuestion.Text)" />
            </div>

            <h5>Options</h5>
            @for (int i = 0; i < currentQuestion.Options.Count; i++)
            {
                var optionIndex = i;
                <div class="input-group mb-2">
                    <InputText class="form-control" @bind-Value="currentQuestion.Options[optionIndex]" placeholder="@($"Option {i + 1}")" />                    <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveOption(currentQuestion, optionIndex)">-</button>
                </div>
            }
            <button type="button" class="btn btn-sm btn-secondary mb-3" @onclick="() => AddOption(currentQuestion)">Add Option</button>

            <div class="form-group mb-2">
                <label for="@($"correctAnswer_{currentQuestion.TempId}")">Correct Answer (Option Index - 0-based):</label>
                <InputNumber id="@($"correctAnswer_{currentQuestion.TempId}")" class="form-control" @bind-Value="currentQuestion.CorrectAnswerIndex" />
                <ValidationMessage For="@(() => currentQuestion.CorrectAnswerIndex)" />
            </div>
            <button type="button" class="btn btn-danger" @onclick="() => RemoveQuestion(currentQuestion)">Remove Question</button>
        </div>
    }
    <button type="button" class="btn btn-info mb-3" @onclick="AddQuestion">Add Question</button>

    <button type="submit" class="btn btn-primary">Create Quiz</button>
</EditForm>

@code {
    // Model for the new quiz being created
    // SKAL REFERERE TIL DIN QUIZZES MODEL FRA MODELLER-PROJEKTET
    private Modeller.Quizzes newQuiz = new Modeller.Quizzes(); // <-- RETTET FRA 'Quiz' TIL 'Modeller.Quizzes'

    // List to hold the questions associated with the new quiz
    private List<QuestionViewModel> questions = new List<QuestionViewModel>();

    // Helper class for UI-specific question data (like temporary ID for rendering)
    // Denne er fin, da den arver fra Modeller.Question
    private class QuestionViewModel : Modeller.Question
    {
        public Guid TempId { get; set; } = Guid.NewGuid();
    }

    // FJERN DENNE DTO DEFINITION HERFRA! DEN SKAL LIGGE I MODELLER-PROJEKTET
    // private class CreateQuizRequest
    // {
    //     public Quiz Quiz { get; set; }
    //     public List<Question> Questions { get; set; }
    // }

    protected override void OnInitialized()
    {
        AddQuestion();
    }

    private void AddQuestion()
    {
        questions.Add(new QuestionViewModel { Options = new List<string> { "", "" } });
    }

    private void RemoveQuestion(QuestionViewModel questionToRemove)
    {
        questions.Remove(questionToRemove);
    }

    private void AddOption(QuestionViewModel question)
    {
        question.Options.Add("");
    }

    private void RemoveOption(QuestionViewModel question, int index)
    {
        if (question.Options.Count > 1)
        {
            question.Options.RemoveAt(index);
        }
    }

    private async Task HandleSubmit()
    {
        // Forbered anmodningsobjektet for API'et
        // CreateQuizRequest er nu defineret i Modeller og er tilgængelig via 'using Modeller;'
        var request = new Modeller.CreateQuizRequest // <-- REFERERER TIL MODELLER.CREATEQUIZREQUEST
        {
            Quiz = newQuiz, // newQuiz er allerede af typen Modeller.Quizzes
            // Konverter QuestionViewModel til Modeller.Question
            Questions = questions.Select(q => new Modeller.Question // <-- BRUG MODELLER.QUESTION
            {
                _id = q._id,
                Text = q.Text,
                Options = q.Options,
                CorrectAnswerIndex = q.CorrectAnswerIndex
            }).ToList()
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Quiz", request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/quizlist");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating quiz: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during quiz creation: {ex.Message}");
        }
    }
}