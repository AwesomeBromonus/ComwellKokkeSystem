@page "/quizlist"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime 

<h3>Available Quizzes</h3>

@if (quizzes == null)
{
    <p><em>Loading quizzes...</em></p>
}
else if (quizzes.Any())
{
    <ul class="list-group">
        @foreach (var quiz in quizzes)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <a href="/quizdetails/@quiz._id">@quiz.Title</a>
                <div>
                    <button class="btn btn-sm btn-info me-2" @onclick="() => NavigateToEdit(quiz._id)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteQuiz(quiz._id)">Delete</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>No quizzes available. Why not <a href="/quizcreator">create one</a>?</p>
}

<button class="btn btn-primary mt-3" @onclick="NavigateToCreate">Create New Quiz</button>

@code {
    // SKAL REFERERE TIL DIN QUIZZES MODEL FRA MODELLER-PROJEKTET
    private List<Modeller.Quizzes> quizzes; // <-- RETTET FRA 'Quiz' TIL 'Modeller.Quizzes'

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all quizzes from your API
            // Kalder nu API'et og forventer en liste af Quizzes
            quizzes = await Http.GetFromJsonAsync<List<Modeller.Quizzes>>("api/Quiz");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching quizzes: {ex.Message}");
            // Handle error, e.g., display a message to the user
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/quizcreator");
    }

    private void NavigateToEdit(string quizId)
    {
        NavigationManager.NavigateTo($"/quizeditor/{quizId}");
    }

    private async Task DeleteQuiz(string quizId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this quiz and all its questions?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/Quiz/{quizId}");
                if (response.IsSuccessStatusCode)
                {
                    quizzes.RemoveAll(q => q._id == quizId);
                    StateHasChanged();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error deleting quiz: {response.StatusCode} - {errorContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception during quiz deletion: {ex.Message}");
            }
        }
    }

    // JSRuntime er allerede injiceret øverst med @inject
    // [Inject] private IJSRuntime JSRuntime { get; set; } // Denne er ikke nødvendig her hvis den er øverst
}