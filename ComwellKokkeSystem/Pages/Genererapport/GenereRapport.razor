@page "/rapportside"
@using Modeller
@using ComwellKokkeSystem.Service
@inject IGenereRapportService RapportService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using ComwellKokkeSystem.Pages.Helpers
@using System.Linq 

<h3>HR Rapport</h3>
@if (!isAuthorized)
{
    <p>Adgang nægtet. Kun admin, HR eller kok kan se denne side.</p>
}
else if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="ChangeYear" class="mb-4 p-2 border rounded">
        @for (int year = 2025; year <= 2030; year++)
        {
            <option value="@year" selected="@(selectedYear == year)">@year</option>
        }
    </select>

    <select @onchange="ChangePraktikperiodeFilter" class="mb-4 p-2 border rounded ml-4">
        <option value="0">Alle Praktikperioder</option>
        @* NYT: Brug Distinct() for at få unikke praktikperiodenavne og ID'er*@
        @foreach (var pp in AllPraktikperioderFilterOptions.OrderBy(p => p.Navn)) // Sorter efter navn for pænere visning
        {
            <option value="@pp.Id">@pp.Navn</option>
        }
    </select>


    <div class="flex justify-between items-center mt-4">
        <button class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
                @onclick="PreviousPage" disabled="@IsFirstPage">Forrige</button>
        <span class="text-sm text-gray-600">Side @CurrentPage af @TotalPages</span>
        <button class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 disabled:opacity-50"
                @onclick="NextPage" disabled="@IsLastPage">Næste</button>
    </div>

    <div class="overflow-x-auto rounded-lg shadow mt-4">
        <table class="min-w-full bg-white text-sm text-left text-gray-700">
            <thead class="bg-gray-100 text-xs uppercase text-gray-600">
            <tr>
                <th class="px-4 py-2"><input type="checkbox" @onclick="ToggleSelectAll" checked="@AllSelected" /></th>
                <th class="px-4 py-2 cursor-pointer" @onclick="() => SortBy(nameof(StudentViewModel.Navn))">Navn</th>
                <th class="px-4 py-2 cursor-pointer" @onclick="() => SortBy(nameof(StudentViewModel.Email))">Email</th>
                <th class="px-4 py-2">Status</th>
                <th class="px-4 py-2">Alle Praktikperioder</th>
                <th class="px-4 py-2">Delmål Progress</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var elev in PagedStudents)
            {
                <tr class="border-b hover:bg-gray-50 transition">
                    <td class="px-4 py-2"><input type="checkbox" @bind="elev.IsSelected" /></td>
                    <td class="px-4 py-2">@elev.Navn</td>
                    <td class="px-4 py-2">@elev.Email</td>
                    <td class="px-4 py-2">
                        <span class="inline-block px-2 py-1 rounded bg-blue-100 text-blue-700">@elev.Status</span>
                    </td>
                    <td class="px-4 py-2">
                        <a class="text-blue-600 underline cursor-pointer"
                           @onclick="() => GoToPraktikperioder(elev.Id)">
                            Se alle praktikperioder
                        </a>
                    </td>

                    <td class="px-4 py-2">
                        @if (elev.DelmaalTotalForSelectedPeriod > 0)
                        {
                            <div class="w-full bg-gray-200 rounded h-2.5 mb-1">
                                <div class="bg-green-500 h-2.5 rounded" style="width:@($"{elev.DelmaalPercentForSelectedPeriod}%")"></div>
                            </div>
                            <span class="font-mono text-xs">@($"{elev.DelmaalDoneForSelectedPeriod}/{elev.DelmaalTotalForSelectedPeriod} ({elev.DelmaalPercentForSelectedPeriod}%)")</span>
                        }
                        else
                        {
                            <span class="italic text-gray-400">Ingen delmål</span>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="flex justify-center gap-4 mt-6 mb-8">
        <div class="overflow-x-auto rounded-lg shadow mt-4">
            <table class="min-w-full bg-white text-sm text-left text-gray-700">
            </table>

            <div class="flex justify-end gap-4 mt-6 mb-8">
                <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
                        @onclick="ExportToCsv">
                    Eksporter til CSV
                </button>
                <button class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
                        @onclick="ExportToExcel">
                    Eksporter til Excel
                </button>
            </div>
        </div>
    </div>

    <ProgressionModal IsOpen="@isModalOpen" Elev="@selectedElev" OnClose="@CloseModal" />
}

@code {
    // Data
    private List<StudentViewModel> elever = new();
    private StudentViewModel? selectedElev;
    private bool isModalOpen = false;

    // Table state
    private int PageSize = 10;
    private int CurrentPage = 1;
    private string SortColumn = nameof(StudentViewModel.Navn);
    private bool SortAscending = true;
    private int selectedYear = 2025;
    private bool isAuthorized = false;
    private bool isLoading = true;

    private int selectedPraktikperiodeFilterId = 0;
    private List<Praktikperiode> AllPraktikperioderFilterOptions = new();

    private IEnumerable<StudentViewModel> PagedStudents =>
        elever
            .OrderByDynamic(SortColumn, SortAscending)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);

    private int TotalPages => (int)Math.Ceiling(elever.Count / (double)PageSize);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private bool AllSelected
    {
        get => PagedStudents.Any() && PagedStudents.All(e => e.IsSelected);
        set
        {
            foreach (var elev in PagedStudents)
                elev.IsSelected = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var role = await AuthService.GetCurrentUserRoleAsync();
        isAuthorized = !string.IsNullOrEmpty(role) &&
                       (role.Equals("Admin", StringComparison.OrdinalIgnoreCase) ||
                        role.Equals("HR", StringComparison.OrdinalIgnoreCase) ||
                        role.Equals("kok", StringComparison.OrdinalIgnoreCase));
        if (!isAuthorized)
        {
            NavigationManager.NavigateTo("/access-denied");
            return;
        }

        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        var userModels = await RapportService.GetEleverAsync(selectedYear) ?? new List<UserModel>();
        var praktikperioder = await RapportService.GetPraktikPerioderAsync(selectedYear) ?? new List<Praktikperiode>();
        // NYT: Hent delmål MED underdelmål via det nye API-endpoint
        var allDelmaalWithUnderdelmaal = await RapportService.GetDelmålWithUnderdelmaalAsync(selectedYear) ?? new List<Delmål>();

        var tempElever = new List<StudentViewModel>();

        foreach (var user in userModels)
        {
            var elevPraktikperioder = praktikperioder.Where(p => p.ElevId == user.Id).ToList();
            // NYT: Filtrer fra den aggregerede liste
            var elevDelmaal = allDelmaalWithUnderdelmaal.Where(d => d.ElevId == user.Id).ToList();

            var nextPeriod = elevPraktikperioder
                .Where(p => p.StartDato >= DateTime.Today)
                .OrderBy(p => p.StartDato)
                .FirstOrDefault();

            var studentVm = new StudentViewModel
            {
                Id = user.Id,
                Navn = user.Navn,
                Email = user.Email,
                Status = user.Role,
                Praktikperioder = elevPraktikperioder,
                Praktikperiode = nextPeriod,
                DelmaalList = elevDelmaal, // Denne liste har nu underdelmål
                ElevplanId = user.ElevplanId,
                SelectedPraktikperiodeId = selectedPraktikperiodeFilterId
            };
            tempElever.Add(studentVm);
        }
        elever = tempElever;

        // Forbered en liste af unikke praktikperioder til filterdropdown
        // Hvis praktikperiodens ID er unikt på tværs af alle perioder (uanset elev), er dette fint.
        // Hvis f.eks. "Praktikperiode 1" har ID=1 for alle elever, kan du bruge .DistinctBy(p => p.Id).
        // Men hvis du vil have alle unikke NAVNE i dropdown'en, skal du gruppere på navn.
        // Jeg antager, at praktikperiode-ID'er er unikke globalt (f.eks. fra en masterliste over praktikperioder).
        AllPraktikperioderFilterOptions = praktikperioder
            .GroupBy(p => p.Id) // Gruppér for at få unikke praktikperioder baseret på ID
            .Select(g => g.First()) // Vælg den første i hver gruppe
            .OrderBy(p => p.StartDato) // Sorter for pæn visning
            .ToList();

        CurrentPage = 1;
        StateHasChanged();
    }

    private void ToggleSelectAll() => AllSelected = !AllSelected;
    private void NextPage() { if (!IsLastPage) CurrentPage++; }
    private void PreviousPage() { if (!IsFirstPage) CurrentPage--; }
    private void SortBy(string column)
    {
        if (SortColumn == column)
            SortAscending = !SortAscending;
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
    }

    private void ShowDetails(StudentViewModel elev)
    {
        Console.WriteLine($"ShowDetails called for {elev.Navn}");
        selectedElev = elev;
        isModalOpen = true;
    }
    private void CloseModal()
    {
        isModalOpen = false;
        selectedElev = null;
    }

    private async Task ChangeYear(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            selectedYear = int.Parse(e.Value.ToString());
            isLoading = true;
            await LoadData();
            isLoading = false;
        }
    }

    private void ChangePraktikperiodeFilter(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            selectedPraktikperiodeFilterId = int.Parse(e.Value.ToString());
            foreach (var elev in elever)
            {
                elev.SelectedPraktikperiodeId = selectedPraktikperiodeFilterId;
            }
            CurrentPage = 1;
            StateHasChanged();
        }
    }

    private async Task ExportToCsv()
    {
        var fileContent = await RapportService.ExportToCsvAsync(selectedYear);
        if (fileContent.Length > 0)
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "rapport.csv", "text/csv", fileContent);
    }
    private async Task ExportToExcel()
    {
        var fileContent = await RapportService.ExportToExcelAsync(selectedYear);
        if (fileContent.Length > 0)
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "rapport.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileContent);
    }

    private void GoToPraktikperioder(int elevId)
    {
        NavigationManager.NavigateTo($"/praktikperioder/{elevId}");
    }
    private void GoToDelmaal(int elevplanId)
    {
        NavigationManager.NavigateTo($"/delmaal/{elevplanId}");
    }
}