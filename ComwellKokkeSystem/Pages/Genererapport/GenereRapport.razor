@page "/rapportside"
@using Modeller
@using ComwellKokkeSystem.Service
@inject IGenereRapportService RapportService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using ComwellKokkeSystem.Pages.Genererapport

<h3 class="text-3xl font-bold text-gray-800 mb-6">HR Rapport</h3>

@if (!isAuthorized)
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        Adgang nægtet. Kun admin, HR eller kok kan se denne side.
    </div>
}
else if (isLoading)
{
    <div class="flex items-center gap-2 text-blue-600">
        <svg class="animate-spin h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
        </svg>
        <span>Indlæser rapportdata...</span>
    </div>
}
else
{
    <div class="mb-4 flex gap-4">
        <div>
            <label class="form-label">Vælg år:</label>
            <select @onchange="ChangeYear" class="form-select">
                @for (int year = 2025; year <= 2030; year++)
                {
                    <option value="@year" selected="@(selectedYear == year)">@year</option>
                }
            </select>
        </div>
        <div>
            <label class="form-label">Praktikperiode:</label>
            <select @onchange="ChangePraktikperiodeFilter" class="form-select">
                <option value="0">Alle Praktikperioder</option>
                @foreach (var pp in AllPraktikperioderFilterOptions)
                {
                    <option value="@pp.Id">@pp.Navn</option>
                }
            </select>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            @errorMessage
        </div>
    }

    <RapportFiltre
        @bind-SearchQuery="søgeord"
        @bind-SelectedStatusFilter="valgtStatusFilter"
        StatusOptions="UnikkeStatusser"
        @bind-SelectedRoleFilter="valgtRolleFilter"
        RoleOptions="UnikkeRoller"
        @bind-SelectedHotelFilter="valgtHotelFilter"
        HotelOptions="UnikkeHoteller"
    />

    <ElevTable Elever="FilteredAndSortedElever" OnShowDetails="ShowPraktikperioder" />

    <div class="flex justify-center gap-4 mt-6 mb-8">
        <button class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
                @onclick="ExportToExcel">
            Eksporter til Excel
        </button>
    </div>
}

@code {
    private List<StudentViewModel> elever = new();
    private List<Praktikperiode> praktikperioder = new();
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    private int selectedYear = DateTime.Now.Year;
    private string søgeord = string.Empty;
    private string valgtStatusFilter = string.Empty;
    private string valgtRolleFilter = string.Empty;
    private string valgtHotelFilter = string.Empty;
    private int selectedPraktikperiodeFilterId = 0;
    private List<Praktikperiode> AllPraktikperioderFilterOptions = new();

    private List<string> UnikkeStatusser => elever.Select(e => e.Status).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().OrderBy(s => s).ToList();
    private List<string> UnikkeRoller => elever.Select(e => e.Role).Where(r => !string.IsNullOrWhiteSpace(r)).Distinct().OrderBy(r => r).ToList();
    private List<string> UnikkeHoteller => elever.Select(e => e.HotelNavn).Where(h => !string.IsNullOrWhiteSpace(h)).Distinct().OrderBy(h => h).ToList();

    private int PageSize = 10;
    private int CurrentPage = 1;

    private IEnumerable<StudentViewModel> FilteredAndSortedElever =>
        elever
            .Where(e =>
                (string.IsNullOrWhiteSpace(søgeord) ||
                 e.Navn.Contains(søgeord, StringComparison.OrdinalIgnoreCase) ||
                 e.Email.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(valgtStatusFilter) || e.Status.Equals(valgtStatusFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(valgtRolleFilter) || e.Role.Equals(valgtRolleFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(valgtHotelFilter) || e.HotelNavn.Equals(valgtHotelFilter, StringComparison.OrdinalIgnoreCase)) &&
                (selectedPraktikperiodeFilterId == 0 || (e.Praktikperiode != null && e.Praktikperiode.Id == selectedPraktikperiodeFilterId))
            )
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);

    private int TotalPages => (int)Math.Ceiling(
        elever
            .Where(e =>
                (string.IsNullOrWhiteSpace(søgeord) ||
                 e.Navn.Contains(søgeord, StringComparison.OrdinalIgnoreCase) ||
                 e.Email.Contains(søgeord, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(valgtStatusFilter) || e.Status.Equals(valgtStatusFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(valgtRolleFilter) || e.Role.Equals(valgtRolleFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(valgtHotelFilter) || e.HotelNavn.Equals(valgtHotelFilter, StringComparison.OrdinalIgnoreCase)) &&
                (selectedPraktikperiodeFilterId == 0 || (e.Praktikperiode != null && e.Praktikperiode.Id == selectedPraktikperiodeFilterId))
            )
            .Count() / (double)PageSize);

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage >= TotalPages;

    protected override async Task OnInitializedAsync()
    {
        var role = await AuthService.GetCurrentUserRoleAsync();
        isAuthorized = !string.IsNullOrEmpty(role) &&
                       (role.Equals("Admin", StringComparison.OrdinalIgnoreCase) ||
                        role.Equals("HR", StringComparison.OrdinalIgnoreCase) ||
                        role.Equals("kok", StringComparison.OrdinalIgnoreCase));
        if (!isAuthorized)
        {
            NavigationManager.NavigateTo("/access-denied");
            return;
        }

        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            elever = new List<StudentViewModel>();
            praktikperioder = await RapportService.GetPraktikPerioderAsync(selectedYear) ?? new List<Praktikperiode>();

            var userModels = await RapportService.GetEleverAsync(selectedYear) ?? new List<UserModel>();
            foreach (var user in userModels)
            {
                var praktikperiode = praktikperioder.FirstOrDefault(pp => pp.ElevId == user.Id) ?? new Praktikperiode { Id = 0, Navn = "Ingen periode" };
                elever.Add(new StudentViewModel
                {
                    Id = user.Id,
                    Navn = user.Navn ?? "Ukendt elev",
                    Email = user.Email ?? "Ukendt",
                    Role = user.Role ?? "Ukendt",
                    HotelNavn = user.HotelNavn ?? "Ukendt",
                    Praktikperiode = praktikperiode
                });
            }

            Console.WriteLine($"Udfyldte {elever.Count} elever i rapportdata");
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved indlæsning af data: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            AllPraktikperioderFilterOptions = praktikperioder.DistinctBy(p => p.Id).OrderBy(p => p.Navn).ToList();
            CurrentPage = 1;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ChangeYear(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            selectedYear = int.Parse(e.Value.ToString());
            await LoadData();
        }
    }

    private void ChangePraktikperiodeFilter(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            selectedPraktikperiodeFilterId = int.Parse(e.Value.ToString());
            CurrentPage = 1;
            StateHasChanged();
        }
    }

    private async Task ShowPraktikperioder(StudentViewModel elev)
    {
        NavigationManager.NavigateTo($"/praktikperioder/{elev.Id}");
    }

    private async Task ExportToExcel()
    {
        try
        {
            var fileContent = await RapportService.ExportToExcelAsync(selectedYear);
            if (fileContent.Length > 0)
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "rapport.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved eksport til Excel: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}