@page "/delmaal/{elevplanId:int}"
@using Modeller
@using ComwellKokkeSystem.Service
@inject IDelmaalService DelmaalService
@inject IElevplanService ElevplanService
@inject IKommentarService KommentarService
@inject IAnmodningService AnmodningService
@inject IAuthService AuthService
@inject UserState UserState
@inject NavigationManager Nav

<h3 class="text-xl font-bold mb-4">📘 Delmål </h3>

@if (isLoading)
{
    <p>⏳ Indlæser praktikperioder...</p>
}
else if (praktikperiodeIds == null || !praktikperiodeIds.Any())
{
    <div class="alert alert-warning">Ingen praktikperioder fundet for denne elevplan.</div>
}
else
{
    <div class="mb-4">
        @foreach (var praktikId in praktikperiodeIds)
        {
            <button class="btn btn-outline-primary me-2 mb-2"
                    @onclick="() => VisDelmaal(praktikId)">
                Praktikperiode @praktikId
            </button>
        }
    </div>

    @if (valgtPraktikId != 0 && UserState.Role?.ToLower() != "elev")
    {
        <button class="btn btn-success mb-3" @onclick="ÅbnModalTilføjDelmaal">➕ Tilføj delmål</button>
    }


    @if (valgtPraktikId != 0 && delmaalListe != null)
    {
        @if (delmaalListe.Any())
        {
            <ul class="list-group">
                @foreach (var d in delmaalListe)
                {
                    <li class="list-group-item mb-3">
                        <div class="d-flex justify-content-between align-items-start flex-wrap gap-3">
                            <div>
                                <strong>@d.Beskrivelse</strong><br />
                                <span class="text-muted">Deadline: @d.Deadline.ToShortDateString()</span>
                            </div>

                            <div>
                                @if (UserState.Role?.ToLower() == "elev")
                                {
                                    <select class="form-select" disabled>
                                        <option value="Ikke fuldført" selected="@IsSelected(d, "Ikke fuldført")">❌ Ikke fuldført</option>
                                        <option value="I gang" selected="@IsSelected(d, "I gang")">🔄 I gang</option>
                                        <option value="Fuldført" selected="@IsSelected(d, "Fuldført")">✅ Fuldført</option>
                                    </select>

                                    <button class="btn btn-sm btn-outline-secondary mt-2"
                                            @onclick="() => StartAnmodning(d.Id)">
                                        📩 Anmod om ændring
                                    </button>
                                }
                                else
                                {
                                    <select class="form-select" @onchange="(e) => OpdaterStatus(d, e.Value?.ToString())">
                                        <option value="Ikke fuldført" selected="@IsSelected(d, "Ikke fuldført")">❌ Ikke fuldført</option>
                                        <option value="I gang" selected="@IsSelected(d, "I gang")">🔄 I gang</option>
                                        <option value="Fuldført" selected="@IsSelected(d, "Fuldført")">✅ Fuldført</option>
                                    </select>
                                }

                            </div>

                            @if (UserState.Role?.ToLower() != "elev")
                            {
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-warning" @onclick="() => RedigerDelmaal(d)">✏️</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => SletDelmaal(d.Id)">🗑️</button>
                                </div>
                            }

                        </div>

                        <!-- Kommentar -->
                        <div class="mt-3">
                            <label>💬 Kommentar:</label>
                            <textarea class="form-control"
                                      placeholder="Skriv en kommentar..."
                                      @bind="nyeKommentarer[d.Id]"></textarea>

                            <button class="btn btn-sm btn-primary mt-2"
                                    @onclick="() => GemKommentar(d.Id)">
                                ➕ Gem kommentar
                            </button>
                        </div>

                        @if (kommentarer.ContainsKey(d.Id) && kommentarer[d.Id].Any())
                        {
                            <div class="mt-3 ps-3 border-start">
                                <strong>Tidligere kommentarer:</strong>
                                <ul>
                                    @foreach (var k in kommentarer[d.Id])
                                    {
                                        <li><em>@k.Indhold</em> <small class="text-muted">(@k.Tidspunkt.ToShortDateString())</small></li>
                                    }
                                </ul>
                            </div>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="alert alert-info">
                Ingen delmål fundet for praktikperiode @valgtPraktikId.
            </div>
        }
    }

    <button class="btn btn-secondary mt-4" @onclick="Tilbage">🔙 Tilbage</button>
}

<!-- Modal: Tilføj/rediger delmål -->
@if (visModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((redigerMode ? "Rediger delmål" : "Tilføj nyt delmål"))</h5>
                    <button type="button" class="btn-close" @onclick="LukModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="nytDelmaal" OnValidSubmit="GemDelmaal">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Beskrivelse:</label>
                            <InputText class="form-control" @bind-Value="nytDelmaal.Beskrivelse" />
                        </div>

                        <div class="mb-3">
                            <label>Deadline:</label>
                            <InputDate class="form-control" @bind-Value="nytDelmaal.Deadline" />
                        </div>

                        <div class="mb-3">
                            <label>Status:</label>
                            <select class="form-select" @bind="nytDelmaal.Status">
                                <option value="Ikke fuldført">❌ Ikke fuldført</option>
                                <option value="I gang">🔄 I gang</option>
                                <option value="Fuldført">✅ Fuldført</option>
                            </select>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">@((redigerMode) ? "Opdater" : "Tilføj")</button>
                            <button type="button" class="btn btn-secondary" @onclick="LukModal">Annuller</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal: Anmodning -->
@if (visAnmodningsModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Anmod om statusændring</h5>
                    <button type="button" class="btn-close" @onclick="LukAnmodningsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Ønsket status:</label>
                        <select class="form-select" @bind="ønsketStatus">
                            <option value="I gang">🔄 I gang</option>
                            <option value="Fuldført">✅ Fuldført</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label>Vælg modtager:</label>
                        <select class="form-select" @bind="valgtModtagerId">
                            @foreach (var m in muligeModtagere)
                            {
                                <option value="@m.Id">@m.Username (@m.Role)</option>
                            }
                        </select>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="SendAnmodning">Send anmodning</button>
                        <button class="btn btn-secondary" @onclick="LukAnmodningsModal">Annuller</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int elevplanId { get; set; }

    private List<int>? praktikperiodeIds;
    private List<Modeller.Delmål>? delmaalListe;
    private int valgtPraktikId = 0;
    private bool isLoading = true;

    private Dictionary<int, string> nyeKommentarer = new();
    private Dictionary<int, List<Modeller.Kommentar>> kommentarer = new();

    private Modeller.Delmål nytDelmaal = new();
    private bool visModal = false;
    private bool redigerMode = false;

    // Anmodningsdata
    private bool visAnmodningsModal = false;
    private int valgtDelmaalId = 0;
    private string ønsketStatus = "Fuldført";
    private int valgtModtagerId;
    private List<Modeller.UserModel> muligeModtagere = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var plan = await ElevplanService.GetElevplanByIdAsync(elevplanId);
            praktikperiodeIds = plan?.PraktikperiodeIds ?? new();
        }
        catch
        {
            praktikperiodeIds = null;
        }
        isLoading = false;
    }

    private async Task VisDelmaal(int praktikperiodeId)
    {
        valgtPraktikId = praktikperiodeId;
        delmaalListe = await DelmaalService.GetByElevplanIdAndPraktikperiodeIdAsync(elevplanId, praktikperiodeId);

        foreach (var d in delmaalListe)
        {
            nyeKommentarer[d.Id] = "";
            var eksisterendeKommentarer = await KommentarService.GetByDelmålIdAsync(d.Id);
            kommentarer[d.Id] = eksisterendeKommentarer ?? new();
        }
    }

    private async Task OpdaterStatus(Modeller.Delmål d, string? nyStatus)
    {
        if (!string.IsNullOrEmpty(nyStatus) && d.Status != nyStatus)
        {
            d.Status = nyStatus;
            await DelmaalService.UpdateDelmaalAsync(d);
        }
    }

    private bool IsSelected(Modeller.Delmål d, string status) => d.Status == status;

    private async Task GemKommentar(int delmaalId)
    {
        if (!string.IsNullOrWhiteSpace(nyeKommentarer[delmaalId]))
        {
            var kommentar = new Kommentar
                {
                    DelmålId = delmaalId,
                    Indhold = nyeKommentarer[delmaalId],
                    Tidspunkt = DateTime.Now
                };

            await KommentarService.AddKommentarAsync(kommentar);
            nyeKommentarer[delmaalId] = "";

            if (!kommentarer.ContainsKey(delmaalId))
                kommentarer[delmaalId] = new();

            kommentarer[delmaalId].Add(kommentar);
        }
    }
    private async Task StartAnmodning(int delmaalId)
    {
        valgtDelmaalId = delmaalId;
        ønsketStatus = "Fuldført";
        valgtModtagerId = 0;

        muligeModtagere = await AuthService.GetAdminsOgKokkeAsync();

        if (muligeModtagere == null || !muligeModtagere.Any())
        {
            Console.WriteLine("❌ Ingen kokke eller admins fundet.");
            return;
        }

        // Sæt første som standardvalg
        valgtModtagerId = muligeModtagere.First().Id;

        visAnmodningsModal = true;
    }


    private async Task SendAnmodning()
    {
        if (UserState.Id == null || valgtModtagerId == 0)
        {
            Console.WriteLine("❌ Elev eller modtager ikke valgt.");
            return;
        }

        var anmodning = new Anmodning
            {
                DelmaalId = valgtDelmaalId,
                ElevId = UserState.Id.Value,
                ModtagerId = valgtModtagerId,
                ØnsketStatus = ønsketStatus
            };

        await AnmodningService.OpretAsync(anmodning);
        visAnmodningsModal = false;
    }


    private void LukAnmodningsModal() => visAnmodningsModal = false;
    private void Tilbage() => Nav.NavigateTo("/administrator");

    private void ÅbnModalTilføjDelmaal()
    {
        nytDelmaal = new Modeller.Delmål
            {
                ElevplanId = elevplanId,
                PraktikperiodeId = valgtPraktikId,
                Deadline = DateTime.Today,
                Status = "Ikke fuldført"
            };
        redigerMode = false;
        visModal = true;
    }

    private void RedigerDelmaal(Modeller.Delmål d)
    {
        nytDelmaal = new Modeller.Delmål
            {
                Id = d.Id,
                Beskrivelse = d.Beskrivelse,
                Deadline = d.Deadline,
                Status = d.Status,
                PraktikperiodeId = d.PraktikperiodeId,
                ElevplanId = d.ElevplanId
            };
        redigerMode = true;
        visModal = true;
    }

    private async Task GemDelmaal()
    {
        if (redigerMode)
        {
            await DelmaalService.UpdateDelmaalAsync(nytDelmaal);
        }
        else
        {
            await DelmaalService.AddDelmaalAsync(nytDelmaal);
        }

        visModal = false;
        await VisDelmaal(valgtPraktikId);
    }

    private async Task SletDelmaal(int id)
    {
        await DelmaalService.DeleteDelmaalAsync(id);
        await VisDelmaal(valgtPraktikId);
    }

    private void LukModal()
    {
        visModal = false;
        redigerMode = false;
        nytDelmaal = new();
    }
}
