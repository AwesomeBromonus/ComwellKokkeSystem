@page "/delmaal/{elevplanId:int}"
@using Modeller
@using ComwellKokkeSystem.Service
@inject IPraktikperiodeService PraktikperiodeService
@inject IDelmaalService DelmaalService
@inject IElevplanService ElevplanService
@inject IKommentarService KommentarService
@inject NavigationManager Nav
@inject IAnmodningService AnmodningService
@inject IAuthService AuthService
@inject UserState UserState
@inject IUserService UserService
@inject IUnderdelmaalService UnderdelmaalService


<h1 class="text-3xl font-bold text-center text-dark mb-5">@elevNavn</h1>



@if (isLoading)
{
    <p>⏳ Indlæser praktikperioder...</p>
}
else if (praktikperioder == null || !praktikperioder.Any())
{
    <div class="alert alert-warning">Ingen praktikperioder fundet for denne elevplan.</div>
}
else
{
    <div class="mb-4">
        @foreach (var periode in praktikperioder)
        {
            var erValgt = periode.Id == valgtPraktikId;
            var btnClass = erValgt
            ? "btn btn-primary fw-bold me-2 mb-2 shadow-sm"
            : "btn btn-outline-primary me-2 mb-2";

            <button class="@btnClass"
                    style="min-width: 160px; border-radius: 12px;"
                    @onclick="() => VisDelmaal(periode.Id)">
                @periode.Navn
            </button>
        }


    </div>

    @if (valgtPraktikId != 0 && UserState.Role?.ToLower() != "elev")
    {
        <button class="btn btn-success mb-3" @onclick="ÅbnModalTilføjDelmaal">➕ Tilføj delmål</button>
    }

    @if (valgtPraktikId != 0 && delmaalListe != null)
    {
        @if (delmaalListe.Any())
        {
            <ul class="list-group">
                @foreach (var d in delmaalListe)
                {
                    <li class="list-group-item mb-3">
                        <div class="d-flex justify-content-between align-items-start flex-wrap gap-3">
                            <div>
                                <strong>@d.Beskrivelse</strong><br />

                                <button class="border-0 bg-transparent text-dark p-0"
                                        style="font-size: 1.2rem;"
                                        @onclick="() => ToggleUnderdelmaalVisning(d.Id)">
                                    @(udvidetDelmaalId == d.Id ? "⬇️" : "➡️")
                                </button>


                                @if (udvidetDelmaalId == d.Id && underdelmaalMap.ContainsKey(d.Id))
                                {
                                    <table class="table table-bordered table-sm mt-2">
                                       
                                        <tbody>
                                            @foreach (var u in underdelmaalMap[d.Id])
                                            {
                                                <tr>
                                                    <td><strong>@u.Beskrivelse</strong></td>
                                                    <td>
                                                        @if (UserState.Role?.ToLower() == "elev")
                                                        {
                                                            <select class="form-select form-select-sm" disabled>
                                                                <option selected="@IsSelected(u.Status, "Ikke fuldført")">❌ Ikke fuldført</option>
                                                                <option selected="@IsSelected(u.Status, "I gang")">🔄 I gang</option>
                                                                <option selected="@IsSelected(u.Status, "Fuldført")">✅ Fuldført</option>
                                                            </select>
                                                        }
                                                        else
                                                        {
                                                            <select class="form-select form-select-sm"
                                                                    @onchange="async e => await OpdaterUnderdelmaalStatus(u, ((ChangeEventArgs)e).Value?.ToString())">
                                                                <option selected="@IsSelected(u.Status, "Ikke fuldført")">❌ Ikke fuldført</option>
                                                                <option selected="@IsSelected(u.Status, "I gang")">🔄 I gang</option>
                                                                <option selected="@IsSelected(u.Status, "Fuldført")">✅ Fuldført</option>
                                                            </select>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (UserState.Role?.ToLower() == "elev")
                                                        {
                                                            <button class="btn btn-outline-secondary btn-sm" style="min-width: 100px"
                                                                    @onclick="() => StartUnderdelmaalAnmodning(u.Id)">
                                                                📩 Anmod
                                                            </button>
                                                        }
                                                    </td>
                                                    @if (UserState.Role?.ToLower() != "elev")
                                                    {
                                                        <td>
                                                            <div class="d-flex gap-2">
                                                                <button class="btn btn-sm btn-warning" @onclick="() => RedigerUnderdelmaal(u)">✏️</button>
                                                                <button class="btn btn-sm btn-danger" @onclick="() => SletUnderdelmaal(u.Id, d.Id)">🗑️</button>
                                                            </div>
                                                        </td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                }

                               
                            </div>

                            <div>
                                @if (UserState.Role?.ToLower() == "elev")
                                {
                                    <select class="form-select" disabled>
                                        <option value="Ikke fuldført" selected="@IsSelected(d, "Ikke fuldført")">❌ Ikke fuldført</option>
                                        <option value="I gang" selected="@IsSelected(d, "I gang")">🔄 I gang</option>
                                        <option value="Fuldført" selected="@IsSelected(d, "Fuldført")">✅ Fuldført</option>
                                    </select>

                                    <button class="btn btn-sm btn-outline-secondary mt-2"
                                            @onclick="() => StartAnmodning(d.Id)">
                                        📩 Anmod
                                    </button>
                                }
                                else
                                {
                                    <div class="d-flex gap-2 flex-wrap align-items-center">
                                        <select class="form-select form-select-sm w-auto"
                                                @onchange="async e => await OpdaterStatus(d, ((ChangeEventArgs)e).Value?.ToString())">
                                            <option value="Ikke fuldført" selected="@IsSelected(d, "Ikke fuldført")">❌ Ikke fuldført</option>
                                            <option value="I gang" selected="@IsSelected(d, "I gang")">🔄 I gang</option>
                                            <option value="Fuldført" selected="@IsSelected(d, "Fuldført")">✅ Fuldført</option>
                                        </select>

                                        <button class="btn btn-sm btn-warning" @onclick="() => RedigerDelmaal(d)">✏️</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => SletDelmaal(d.Id)">🗑️</button>
                                        <button class="btn btn-sm btn-outline-success" @onclick="() => ÅbenUnderdelmaalModal(d.Id)">➕ Tilføj underdelmål</button>
                                    </div>
                                }

                            </div>

                         
                        </div>

                        <!-- Kommentar -->
                        <div class="mt-3">
                           
                            <textarea class="form-control"
                                      placeholder="Skriv en kommentar..."
                                      @bind="nyeKommentarer[d.Id]"></textarea>

                            <button class="btn btn-sm btn-primary mt-2"
                                    @onclick="() => GemKommentar(d.Id)">
                                Send
                            </button>
                        </div>

                        <!-- Tidligere kommentarer -->
                        @if (kommentarer.ContainsKey(d.Id) && kommentarer[d.Id].Any())
                        {
                            <div class="mt-3 ps-3 border-start">
                                <strong>Tidligere kommentarer:</strong>
                                <ul>
                                    @foreach (var k in kommentarer[d.Id])
                                    {
                                        <li><em>@k.Indhold</em> <small class="text-muted">(@k.Tidspunkt.ToShortDateString())</small></li>
                                    }
                                </ul>
                            </div>
                        }
                    </li>
                }

            </ul>
        }
        else
        {
            <div class="alert alert-info">
                Ingen delmål fundet for praktikperiode @valgtPraktikId.
            </div>
        }
    }

    <button class="btn btn-secondary mt-4" @onclick="Tilbage">🔙 Tilbage</button>
}

<!-- Modal: Tilføj/rediger delmål -->
@if (visModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((redigerMode ? "Rediger delmål" : "Tilføj nyt delmål"))</h5>
                    <button type="button" class="btn-close" @onclick="LukModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="nytDelmaal" OnValidSubmit="GemDelmaal">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Beskrivelse:</label>
                            <InputText class="form-control" @bind-Value="nytDelmaal.Beskrivelse" />
                        </div>

                        <div class="mb-3">
                            <label>Deadline:</label>
                            <InputDate class="form-control" @bind-Value="nytDelmaal.Deadline" />
                        </div>

                        <div class="mb-3">
                            <label>Status:</label>
                            <select class="form-select" @bind="nytDelmaal.Status">
                                <option value="Ikke fuldført">❌ Ikke fuldført</option>
                                <option value="I gang">🔄 I gang</option>
                                <option value="Fuldført">✅ Fuldført</option>
                            </select>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">@((redigerMode) ? "Opdater" : "Tilføj")</button>
                            <button type="button" class="btn btn-secondary" @onclick="LukModal">Annuller</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal: Anmodning -->
@if (visAnmodningsModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Anmod om statusændring</h5>
                    <button type="button" class="btn-close" @onclick="LukAnmodningsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Ønsket status:</label>
                        <select class="form-select" @bind="ønsketStatus">
                            <option value="I gang">🔄 I gang</option>
                            <option value="Fuldført">✅ Fuldført</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label>Vælg modtager:</label>
                        <select class="form-select" @bind="valgtModtagerId">
                            @foreach (var m in muligeModtagere)
                            {
                                <option value="@m.Id">@m.Username (@m.Role)</option>
                            }
                        </select>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="SendAnmodning">Send anmodning</button>
                        <button class="btn btn-secondary" @onclick="LukAnmodningsModal">Annuller</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<!-- Modal: Underdekmåls Anmodning -->
@if (visUnderdelmaalAnmodningModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Anmod om ændring på underdelmål</h5>
                    <button type="button" class="btn-close" @onclick="() => visUnderdelmaalAnmodningModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Ønsket status:</label>
                        <select class="form-select" @bind="ønsketStatus">
                            <option value="I gang">🔄 I gang</option>
                            <option value="Fuldført">✅ Fuldført</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label>Vælg modtager:</label>
                        <select class="form-select" @bind="valgtModtagerId">
                            @foreach (var m in muligeModtagere)
                            {
                                <option value="@m.Id">@m.Username (@m.Role)</option>
                            }
                        </select>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="SendUnderdelmaalAnmodning">Send anmodning</button>
                        <button class="btn btn-secondary" @onclick="() => visUnderdelmaalAnmodningModal = false">Annuller</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal: Underdelmål-->

@if (visUnderdelmaalModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((redigererUnderdelmaal ? "Rediger underdelmål" : "Tilføj underdelmål"))</h5>
                    <button type="button" class="btn-close" @onclick="LukUnderdelmaalModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="nyUnderdelmaal" OnValidSubmit="GemUnderdelmaal">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Beskrivelse:</label>
                            <InputText class="form-control" @bind-Value="nyUnderdelmaal.Beskrivelse" />
                        </div>

                        <div class="mb-3">
                            <label>Deadline offset (dage):</label>
                            <InputNumber class="form-control" @bind-Value="nyUnderdelmaal.DeadlineOffsetDage" />
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">@((redigererUnderdelmaal ? "Opdater" : "Tilføj"))</button>
                            <button type="button" class="btn btn-secondary" @onclick="LukUnderdelmaalModal">Annuller</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int elevplanId { get; set; }

    private List<Modeller.Praktikperiode> praktikperioder = new();

    private List<Modeller.Delmål>? delmaalListe;
    private int valgtPraktikId = 0;
    private bool isLoading = true;

    private Dictionary<int, string> nyeKommentarer = new();
    private Dictionary<int, List<Modeller.Kommentar>> kommentarer = new();

    private Modeller.Delmål nytDelmaal = new();
    private bool visModal = false;
    private bool redigerMode = false;

    private string elevNavn = "";

    private bool IsSelected(string currentStatus, string statusToCheck) => currentStatus == statusToCheck;


    // Anmodningsdata
    private bool visAnmodningsModal = false;
    private int valgtDelmaalId = 0;
    private string ønsketStatus = "Fuldført";
    private int valgtModtagerId;
    private List<Modeller.UserModel> muligeModtagere = new();

    //Underdelmåls anmodning
    private int valgtUnderdelmaalId = 0;
    private bool visUnderdelmaalAnmodningModal = false;
   


    //Underdelmål
    private Dictionary<int, List<Modeller.Underdelmaal>> underdelmaalMap = new();
    private int? udvidetDelmaalId = null;
    private bool visUnderdelmaalModal = false;
    private bool redigererUnderdelmaal = false;
    private Underdelmaal nyUnderdelmaal = new();
    private int valgtDelmaalTilUnderdelmaal = 0;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Hent elevplanen
            var elevplan = await ElevplanService.GetElevplanByIdAsync(elevplanId);

            // Hent praktikperioder
            praktikperioder = await PraktikperiodeService.GetByElevplanIdAsync(elevplanId);

            // Hent brugeroplysninger hvis elevplanen eksisterer
            if (elevplan != null)
            {
                var bruger = await UserService.GetByIdAsync(elevplan.ElevId);
                elevNavn = bruger?.Navn ?? "Ukendt elev";
            }
            else
            {
                elevNavn = "Ukendt elev";
            }
        }
        catch
        {
            praktikperioder = null;
            elevNavn = "Ukendt elev";
        }

        isLoading = false;
    }
    private void ÅbenUnderdelmaalModal(int delmaalId)
    {
        // Gem ID'et på det delmål, underdelmålet skal knyttes til
        valgtDelmaalTilUnderdelmaal = delmaalId;

        // Opret en ny instans af Underdelmaal med tilknytning til delmål
        nyUnderdelmaal = new Underdelmaal { DelmaalId = delmaalId };

        // Sæt modaltilstand til opret-tilstand (ikke redigering)
        redigererUnderdelmaal = false;

        // Vis modalvinduet i UI'et
        visUnderdelmaalModal = true;
    }
    private void RedigerUnderdelmaal(Underdelmaal u)
    {
        // Opret en kopi af det eksisterende underdelmål, så det kan redigeres uden at ændre originalen direkte
        nyUnderdelmaal = new Underdelmaal
            {
                Id = u.Id,                                 // Bevar ID'et for at sikre opdatering frem for oprettelse
                DelmaalId = u.DelmaalId,                   // Tilknytning til det overordnede delmål
                Beskrivelse = u.Beskrivelse,               // Beskrivelse kopieres til redigering
                DeadlineOffsetDage = u.DeadlineOffsetDage, // Evt. forskydning af deadline i dage
                Status = u.Status                          // Status som fx "Ikke fuldført", "I gang", "Fuldført"
            };

        // Gem det delmål ID, vi redigerer under
        valgtDelmaalTilUnderdelmaal = u.DelmaalId;

        // Sæt komponentens tilstand til rediger-tilstand
        redigererUnderdelmaal = true;

        // Vis modal-vinduet til redigering
        visUnderdelmaalModal = true;
    }


    private void LukUnderdelmaalModal()
    {
        // Skjul modal-vinduet
        visUnderdelmaalModal = false;

        // Nulstil underdelmålsmodellen, så feltet er tomt næste gang modal åbnes
        nyUnderdelmaal = new();
    }
    private async Task GemUnderdelmaal()
    {
        if (redigererUnderdelmaal)
        {
            // Hvis vi er i redigeringstilstand, opdater det eksisterende underdelmål
            await UnderdelmaalService.UpdateAsync(nyUnderdelmaal);
        }
        else
        {
            // Ellers tilføj det som et nyt underdelmål
            await UnderdelmaalService.AddAsync(nyUnderdelmaal);
        }

        // Luk modal-vinduet og nulstil modellen
        visUnderdelmaalModal = false;
        nyUnderdelmaal = new();

        // Ryd cache/visning for dette delmål og hent opdateret liste
        underdelmaalMap.Remove(valgtDelmaalTilUnderdelmaal);
        await ToggleUnderdelmaalVisning(valgtDelmaalTilUnderdelmaal);
    }


    private async Task SletUnderdelmaal(int id, int delmaalId)
    {
        // Slet underdelmålet med det angivne ID via service-laget
        await UnderdelmaalService.DeleteAsync(id);

        // Fjern den eksisterende liste med underdelmål for delmålet fra lokal cache
        underdelmaalMap.Remove(delmaalId);

        // Hent og vis opdateret liste over underdelmål for det pågældende delmål
        await ToggleUnderdelmaalVisning(delmaalId);
    }



   


    private async Task VisDelmaal(int praktikperiodeId)
    {
        // Gem det valgte praktikperiode-ID, så vi ved hvilke delmål der skal vises
        valgtPraktikId = praktikperiodeId;

        // Hent delmål for den aktuelle elevplan og praktikperiode
        delmaalListe = await DelmaalService.GetByElevplanIdAndPraktikperiodeIdAsync(elevplanId, praktikperiodeId);

        // For hvert delmål: klargør tom kommentar og hent tidligere kommentarer
        foreach (var d in delmaalListe)
        {
            // Sæt en tom streng som standardværdi for ny kommentar til hvert delmål
            nyeKommentarer[d.Id] = "";

            // Hent eksisterende kommentarer til dette delmål
            var eksisterendeKommentarer = await KommentarService.GetByDelmålIdAsync(d.Id);

            // Gem kommentarerne i en dictionary, så de kan vises i UI’et
            kommentarer[d.Id] = eksisterendeKommentarer ?? new();
        }
    }


    private async Task OpdaterStatus(Modeller.Delmål d, string? nyStatus)
    {
        // Tjek at der er valgt en ny status, og at den faktisk er forskellig fra den nuværende
        if (!string.IsNullOrEmpty(nyStatus) && d.Status != nyStatus)
        {
            // Opdater status på delmålet i objektet
            d.Status = nyStatus;

            // Gem ændringen i databasen via service
            await DelmaalService.UpdateDelmaalAsync(d);
        }
    }
    // Returnerer true hvis delmålets status svarer til den angivne status (bruges fx til at sætte "selected" i en dropdown)
    private bool IsSelected(Modeller.Delmål d, string status) => d.Status == status;
   
    private async Task GemKommentar(int delmaalId)
    {
        // Tjek om der faktisk er skrevet en kommentar (ikke tom eller kun mellemrum)
        if (!string.IsNullOrWhiteSpace(nyeKommentarer[delmaalId]))
        {
            // Opret et nyt Kommentar-objekt med tilknytning til delmål og aktuelt tidspunkt
            var kommentar = new Kommentar
                {
                    DelmålId = delmaalId,
                    Indhold = nyeKommentarer[delmaalId],
                    Tidspunkt = DateTime.Now
                };

            // Gem kommentaren via service
            await KommentarService.AddKommentarAsync(kommentar);

            // Ryd inputfeltet for den aktuelle kommentar
            nyeKommentarer[delmaalId] = "";

            // Hvis der ikke allerede er en liste med kommentarer for dette delmål, opret én
            if (!kommentarer.ContainsKey(delmaalId))
                kommentarer[delmaalId] = new();

            // Tilføj den nye kommentar til listen, så den vises med det samme i UI'et
            kommentarer[delmaalId].Add(kommentar);
        }
    }

    private async Task StartAnmodning(int delmaalId)
    {
        // Gem ID på det delmål, der skal anmodes om statusændring på
        valgtDelmaalId = delmaalId;

        // Foruddefiner ønsket status til "Fuldført"
        ønsketStatus = "Fuldført";

        // Nulstil modtager-id, indtil der vælges én
        valgtModtagerId = 0;

        // Hent en liste over brugere med rolle "admin" eller "kok"
        muligeModtagere = await AuthService.GetAdminsOgKokkeAsync();

        // Hvis der ikke findes nogen brugere, log og afbryd
        if (muligeModtagere == null || !muligeModtagere.Any())
        {
            Console.WriteLine("❌ Ingen kokke eller admins fundet.");
            return;
        }

        // Vælg den første i listen som standardmodtager
        valgtModtagerId = muligeModtagere.First().Id;

        // Vis modal-vinduet til at sende anmodningen
        visAnmodningsModal = true;
    }


    private async Task SendAnmodning()
    {
        // Tjek at både elevens ID og modtagerens ID er sat – ellers afbryd
        if (UserState.Id == null || valgtModtagerId == 0)
        {
            Console.WriteLine("❌ Elev eller modtager ikke valgt.");
            return;
        }

        // Opret en ny anmodning med nødvendige oplysninger
        var anmodning = new Anmodning
            {
                DelmaalId = valgtDelmaalId,           // Det delmål der ønskes ændret
                ElevId = UserState.Id.Value,          // ID på eleven der anmoder
                ModtagerId = valgtModtagerId,         // ID på den person der skal godkende
                ØnsketStatus = ønsketStatus           // Den status eleven gerne vil have ændret til
            };

        // Send anmodningen via service-laget
        await AnmodningService.OpretAsync(anmodning);

        // Luk modalvinduet efter afsendelse
        visAnmodningsModal = false;
    }



    // Lukker modalvinduet for anmodning
    private void LukAnmodningsModal() => visAnmodningsModal = false;

    // Navigerer brugeren tilbage til administratorforsiden
    private void Tilbage() => Nav.NavigateTo("/administrator");

    private void ÅbnModalTilføjDelmaal()
    {
        // Opret en ny instans af Delmål med standardværdier
        nytDelmaal = new Modeller.Delmål
            {
                ElevplanId = elevplanId,                  // Knyt delmålet til den aktuelle elevplan
                PraktikperiodeId = valgtPraktikId,        // Knyt delmålet til den valgte praktikperiode
                Deadline = DateTime.Today,                // Sæt dagens dato som standard deadline
                Status = "Ikke fuldført"                  // Startstatus for nye delmål
            };

        // Indstil komponenten til opret-tilstand, ikke redigerings-tilstand
        redigerMode = false;

        // Vis modal-vinduet, så brugeren kan udfylde og oprette delmålet
        visModal = true;
    }

    private void RedigerDelmaal(Modeller.Delmål d)
    {
        // Opret en kopi af det valgte delmål, så brugeren kan redigere det uden at ændre originalen direkte
        nytDelmaal = new Modeller.Delmål
            {
                Id = d.Id,                                 // Bevar ID for at kunne opdatere det rigtige objekt senere
                Beskrivelse = d.Beskrivelse,               // Udfyld formularen med eksisterende data
                Deadline = d.Deadline,
                Status = d.Status,
                PraktikperiodeId = d.PraktikperiodeId,
                ElevplanId = d.ElevplanId
            };

        // Angiv at modalvinduet skal vises i redigeringstilstand
        redigerMode = true;

        // Vis modalvinduet med den udfyldte formular
        visModal = true;
    }


    private async Task GemDelmaal()
    {
        if (redigerMode)
        {
            // Hvis vi er i redigeringstilstand, opdater det eksisterende delmål
            await DelmaalService.UpdateDelmaalAsync(nytDelmaal);
        }
        else
        {
            // Ellers opret et nyt delmål
            await DelmaalService.AddDelmaalAsync(nytDelmaal);
        }

        // Luk modalvinduet efter gem
        visModal = false;

        // Genindlæs delmålene for den valgte praktikperiode
        await VisDelmaal(valgtPraktikId);
    }

    private async Task SletDelmaal(int id)
    {
        // Slet delmålet med det angivne ID via service-laget
        await DelmaalService.DeleteDelmaalAsync(id);

        // Genindlæs delmålene for den valgte praktikperiode, så UI opdateres
        await VisDelmaal(valgtPraktikId);
    }


    private void LukModal()
    {
        visModal = false;
        redigerMode = false;
        nytDelmaal = new();
    }

    private async Task ToggleUnderdelmaalVisning(int delmaalId)
    {
        // Hvis delmålet allerede er udvidet, luk det sammen
        if (udvidetDelmaalId == delmaalId)
        {
            udvidetDelmaalId = null;
        }
        else
        {
            // Udvid visningen for det valgte delmål
            udvidetDelmaalId = delmaalId;

            // Hvis underdelmålene for delmålet ikke allerede er hentet
            if (!underdelmaalMap.ContainsKey(delmaalId))
            {
                // Hent underdelmålene fra databasen via service
                var result = await UnderdelmaalService.GetByDelmaalIdAsync(delmaalId);

                // Gem dem i lokal map/ordbog – hvis null, brug tom liste
                underdelmaalMap[delmaalId] = result ?? new();
            }
        }
    }


    private async Task StartUnderdelmaalAnmodning(int underdelmaalId)
    {
        // Gem ID på det underdelmål, anmodningen handler om
        valgtUnderdelmaalId = underdelmaalId;

        // Forudindstil ønsket status til "Fuldført"
        ønsketStatus = "Fuldført";

        // Nulstil modtager-ID, så det kan vælges eller sættes automatisk
        valgtModtagerId = 0;

        // Hent mulige modtagere (fx administratorer og kokke) via auth-service
        muligeModtagere = await AuthService.GetAdminsOgKokkeAsync();

        // Hvis ingen modtagere findes, vis fejl og stop
        if (muligeModtagere == null || !muligeModtagere.Any())
        {
            Console.WriteLine("❌ Ingen kokke eller admins fundet.");
            return;
        }

        // Vælg første modtager som standard
        valgtModtagerId = muligeModtagere.First().Id;

        // Vis modal-vinduet til at sende anmodningen
        visUnderdelmaalAnmodningModal = true;
    }


    private async Task SendUnderdelmaalAnmodning()
    {
        // Tjek at både elevens ID og modtagerens ID er sat — ellers stop
        if (UserState.Id == null || valgtModtagerId == 0)
        {
            Console.WriteLine("❌ Elev eller modtager ikke valgt.");
            return;
        }

        // Opret en ny anmodning med relevante oplysninger
        var anmodning = new Anmodning
            {
                UnderdelmaalId = valgtUnderdelmaalId,   // ID på det underdelmål, anmodningen vedrører
                ElevId = UserState.Id.Value,            // ID på den elev der sender anmodningen
                ModtagerId = valgtModtagerId,           // ID på den modtager (fx admin eller kok)
                ØnsketStatus = ønsketStatus             // Status eleven ønsker ændret til (fx "Fuldført")
            };

        // Send anmodningen via service-laget
        await AnmodningService.OpretAsync(anmodning);

        // Luk modal-vinduet efter afsendelse
        visUnderdelmaalAnmodningModal = false;
    }

    private async Task OpdaterUnderdelmaalStatus(Underdelmaal u, string? nyStatus)
    {
        // Tjek at den nye status ikke er tom, og at den faktisk er forskellig fra den nuværende
        if (!string.IsNullOrEmpty(nyStatus) && u.Status != nyStatus)
        {
            // Opdater status på underdelmålet
            u.Status = nyStatus;

            // Gem ændringen i databasen via service-laget
            await UnderdelmaalService.UpdateAsync(u);

            // 🔁 Genindlæs underdelmålene for det pågældende delmål, så UI opdateres
            await GenindlæsUnderdelmaal(u.DelmaalId);
        }
    }


    private async Task GenindlæsUnderdelmaal(int delmaalId)
    {
        // Hent opdateret liste over underdelmål for det angivne delmål
        var result = await UnderdelmaalService.GetByDelmaalIdAsync(delmaalId);

        // Gem resultatet i lokal ordbog – brug tom liste hvis null
        underdelmaalMap[delmaalId] = result ?? new();

        // Tving komponenten til at opdatere visningen
        StateHasChanged();
    }


}
