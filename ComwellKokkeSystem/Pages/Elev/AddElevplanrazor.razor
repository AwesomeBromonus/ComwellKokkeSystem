@page "/opret-elevplan"
@using ComwellKokkeSystem.Service
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService
@inject IDelmaalService DelmaalService
@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Opret Elevplan</h3>

@if (!erTilladt)
{
    <div class="alert alert-danger mt-3">
        ❌ Adgang nægtet – kun administratorer kan oprette elevplaner.
    </div>
}
else
{
    <EditForm Model="elevplan" OnValidSubmit="GemElevplan">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Kommentar:</label>
            <InputTextArea class="form-control" @bind-Value="elevplan.Kommentar" />
        </div>

        <div class="mb-3">
            <label>Startdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.StartDato" />
        </div>

        <div class="mb-3">
            <label>Slutdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.SlutDato" />
        </div>

        <div class="mb-3">
            <label>Vælg bruger (kun elever uden elevplan):</label>
            @if (brugere.Count == 0)
            {
                <p class="text-muted">Ingen brugere fundet.</p>
            }
            else
            {
                @foreach (var b in brugere.Where(b => b.Role?.ToLower() == "elev" && (b.ElevplanId == null || b.ElevplanId == 0)))

                {
                    <div class="card p-3 mb-2 shadow-sm"
                         style="cursor: pointer; border: @(valgtElevId == b.Id ? "2px solid #198754" : "1px solid #ccc")"
                         @onclick="@(() => valgtElevId = b.Id)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@b.Navn</strong><br />
                                <small>@b.Username – @b.Role</small>
                            </div>
                            <span class="badge bg-primary">ID: @b.Id</span>

                            @if (valgtElevId == b.Id)
                            {
                                <span class="badge bg-success ms-2">✔️ Valgt</span>
                            }
                        </div>
                    </div>
                }
            }
        </div>

        <button class="btn btn-primary mt-3" type="submit">Gem elevplan</button>

        @if (!string.IsNullOrEmpty(fejlbesked))
        {
            <div class="alert alert-danger mt-3">@fejlbesked</div>
        }

        @if (success)
        {
            <div class="alert alert-success mt-3">✅ Elevplan oprettet og tildelt!</div>
        }
    </EditForm>
}

@code {
    private Modeller.Elevplan elevplan = new();
    private List<Modeller.Praktikperiode> praktikPerioder = new();
    private List<Modeller.UserModel> brugere = new();
    private int valgtElevId = 0;
    private bool success = false;
    private bool erTilladt = false;
    private string? fejlbesked = null;

    protected override async Task OnInitializedAsync()
    {
        var rolle = await AuthService.GetCurrentUserRoleAsync();
        if (rolle?.ToLower() != "admin")
        {
            erTilladt = false;
            Nav.NavigateTo("/elevplaner", true);
            return;
        }

        erTilladt = true;

        praktikPerioder = await PraktikService.GetAllAsync();
        brugere = await Http.GetFromJsonAsync<List<Modeller.UserModel>>("api/users/all");
    }

    private async Task GemElevplan()
    {
        fejlbesked = null;

        if (valgtElevId == 0)
        {
            fejlbesked = "Du skal vælge en elev.";
            return;
        }

        elevplan.ElevId = valgtElevId;
        elevplan.OprettetDato = DateTime.Now;
        elevplan.PraktikperiodeIds = new List<int>();

        // 1. Opret elevplan
        var elevplanResponse = await Http.PostAsJsonAsync("api/elevplan", elevplan);
        if (!elevplanResponse.IsSuccessStatusCode)
        {
            fejlbesked = "Kunne ikke oprette elevplan.";
            return;
        }

        var oprettetPlan = await elevplanResponse.Content.ReadFromJsonAsync<Modeller.Elevplan>();
        if (oprettetPlan == null)
        {
            fejlbesked = "Fejl ved indlæsning af oprettet elevplan.";
            return;
        }

        // 2. Opret 3 praktikperioder
        for (int i = 1; i <= 3; i++)
        {
            var praktik = new Modeller.Praktikperiode
                {
                    Navn = $"Praktikperiode {i}",
                    ElevId = valgtElevId,
                    ElevplanId = oprettetPlan.Id
                };

            var praktikResponse = await Http.PostAsJsonAsync("api/praktikperiode", praktik);
            if (!praktikResponse.IsSuccessStatusCode)
            {
                fejlbesked = $"Kunne ikke oprette praktikperiode {i}.";
                return;
            }

            var oprettetPraktik = await praktikResponse.Content.ReadFromJsonAsync<Modeller.Praktikperiode>();
            if (oprettetPraktik != null)
            {
                oprettetPlan.PraktikperiodeIds.Add(oprettetPraktik.Id);

                // 3. Opret standarddelmål til praktikperioden
                var delmaalListe = GenererStandardDelmaal(i, oprettetPraktik.Id, valgtElevId, oprettetPlan.Id);

                foreach (var delmaal in delmaalListe)
                {
                    await Http.PostAsJsonAsync("api/delmaal", delmaal);
                }
            }
        }

        // 4. Opdater elevplan med praktikperiode-ids
        await Http.PutAsJsonAsync($"api/elevplan/{oprettetPlan.Id}", oprettetPlan);

        // 5. Tildel elevplan til bruger
        var assignResponse = await Http.PutAsJsonAsync($"api/users/{valgtElevId}/assign-elevplan", new { ElevplanId = oprettetPlan.Id });
        if (!assignResponse.IsSuccessStatusCode)
        {
            fejlbesked = "Elevplan blev oprettet, men kunne ikke tildeles brugeren.";
            return;
        }

        success = true;
        Nav.NavigateTo("/administrator");
    }
    private List<Modeller.Delmål> GenererStandardDelmaal(int nr, int praktikperiodeId, int elevId, int elevplanId)
    {
        var skabelon = nr switch
        {
            1 => new[]
            {
            ("Skære grøntsager i ensartede tern", new DateTime(2025, 6, 15)),
            ("Anvende korrekt hygiejne ved råvarer", new DateTime(2025, 6, 20)),
            ("Skrælle og klargøre kartofler korrekt", new DateTime(2025, 6, 25))
        },
            2 => new[]
            {
            ("Lære at tilberede en grundsovs", new DateTime(2026, 1, 15)),
            ("Forstå køkkenets arbejdsgange", new DateTime(2026, 1, 20)),
            ("Assistere ved en middagsservering", new DateTime(2026, 1, 25))
        },
            3 => new[]
            {
            ("Planlægge en menu for en uge", new DateTime(2027, 1, 15)),
            ("Lede et mindre team i køkkenet", new DateTime(2027, 1, 20)),
            ("Evaluere en uges arbejde", new DateTime(2027, 1, 25))
        },
            _ => Array.Empty<(string, DateTime)>()
        };

        return skabelon.Select(s => new Modeller.Delmål
            {
                Beskrivelse = s.Item1,
                Deadline = s.Item2,
                Status = "Ikke fuldført",
                Ansvarlig = "Nærmeste leder",
                Igangsætter = "Nærmeste leder",
                Kommentar = "",
                Elevtur = "",
                ElevId = elevId,
                ElevplanId = elevplanId,
                PraktikperiodeId = praktikperiodeId
            }).ToList();
    }


}
