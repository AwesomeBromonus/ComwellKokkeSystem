@page "/opret-elevplan"
@using ComwellKokkeSystem.Service
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService
@inject IDelmaalService DelmaalService
@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Opret Elevplan</h3>

@if (!erTilladt)
{
    <div class="alert alert-danger mt-3">
        ❌ Adgang nægtet – kun administratorer kan oprette elevplaner.
    </div>
}
else
{
    <EditForm Model="elevplan" OnValidSubmit="GemElevplan">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Kommentar:</label>
            <InputTextArea class="form-control" @bind-Value="elevplan.Kommentar" />
        </div>

        <div class="mb-3">
            <label>Startdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.StartDato" />
        </div>

        <div class="mb-3">
            <label>Slutdato:</label>
            <InputDate class="form-control" @bind-Value="elevplan.SlutDato" />
        </div>

        <div class="mb-3">
            <label>Skoleperiode:</label>
            <InputText class="form-control" @bind-Value="elevplan.Skoleperiode" placeholder="Fx GF2 - uge 33-41" />
        </div>

        <div class="mb-3">
            <label for="skoleforloeb" class="form-label">Skoleforløb</label>
            <InputText id="skoleforloeb" class="form-control" @bind-Value="elevplan.SkoleForløb" />
        </div>



        <div class="mb-3">
            <label>Vælg bruger (kun elever uden elevplan):</label>
            @if (brugere.Count == 0)
            {
                <p class="text-muted">Ingen brugere fundet.</p>
            }
            else
            {
                @foreach (var b in brugere.Where(b => b.Role?.ToLower() == "elev" && (b.ElevplanId == null || b.ElevplanId == 0)))
                {
                    <div class="card p-3 mb-2 shadow-sm"
                         style="cursor: pointer; border: @(valgtElevId == b.Id ? "2px solid #198754" : "1px solid #ccc")"
                         @onclick="@(() => valgtElevId = b.Id)">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@b.Navn</strong><br />
                                <small>@b.Username – @b.Role</small>
                            </div>
                            <span class="badge bg-primary">ID: @b.Id</span>

                            @if (valgtElevId == b.Id)
                            {
                                <span class="badge bg-success ms-2">✔️ Valgt</span>
                            }
                        </div>
                    </div>
                }
            }
        </div>

        <button class="btn btn-primary mt-3" type="submit">Gem elevplan</button>

        @if (!string.IsNullOrEmpty(fejlbesked))
        {
            <div class="alert alert-danger mt-3">@fejlbesked</div>
        }

        @if (success)
        {
            <div class="alert alert-success mt-3">✅ Elevplan oprettet og tildelt!</div>
        }
    </EditForm>
}

@code {
    // Model til at holde den elevplan der oprettes via formularen
    private Modeller.Elevplan elevplan = new();

    // Liste over eksisterende praktikperioder (kan bruges eller opdateres senere)
    private List<Modeller.Praktikperiode> praktikPerioder = new();

    // Liste over brugere hentet fra API’et – bruges til at vise mulige elever
    private List<Modeller.UserModel> brugere = new();

    // Id på den elev, som administratoren vælger i UI’et
    private int valgtElevId = 0;

    // Bruges til at vise succesbesked efter vellykket oprettelse
    private bool success = false;

    // Bruges til at styre om brugeren har adgang til at oprette elevplaner
    private bool erTilladt = false;

    // Fejlbesked vises til brugeren, hvis noget går galt i processen
    private string? fejlbesked = null;

    // Kører automatisk, når siden indlæses første gang
    protected override async Task OnInitializedAsync()
    {
        // Hent rollen for den aktuelle bruger
        var rolle = await AuthService.GetCurrentUserRoleAsync();

        // Hvis rollen ikke er "admin", næg adgang og omdiriger
        if (rolle?.ToLower() != "admin")
        {
            erTilladt = false;
            Nav.NavigateTo("/elevplaner", true);
            return;
        }

        // Tillad adgang til siden og hent data
        erTilladt = true;

        // Hent alle eksisterende praktikperioder (kan bruges hvis nødvendigt)
        praktikPerioder = await PraktikService.GetAllAsync();

        // Hent alle brugere fra backend – bruges til at vise valgbare elever
        brugere = await Http.GetFromJsonAsync<List<Modeller.UserModel>>("api/users/all");
    }

    // Kaldes, når brugeren indsender formularen og den er gyldig
    private async Task GemElevplan()
    {
        // Nulstil tidligere fejlbesked
        fejlbesked = null;

        // Tjek at en elev er valgt, ellers vis fejl og stop
        if (valgtElevId == 0)
        {
            fejlbesked = "Du skal vælge en elev.";
            return;
        }

        // Udfyld grundlæggende data på elevplanen
        elevplan.ElevId = valgtElevId;
        elevplan.OprettetDato = DateTime.Now;
        elevplan.PraktikperiodeIds = new List<int>();

        // Send elevplan til backend via POST
        var elevplanResponse = await Http.PostAsJsonAsync("api/elevplan", elevplan);

        // Hvis oprettelsen fejler, vis fejl og stop
        if (!elevplanResponse.IsSuccessStatusCode)
        {
            fejlbesked = "Kunne ikke oprette elevplan.";
            return;
        }

        // Hent den oprettede elevplan tilbage fra API-respons
        var oprettetPlan = await elevplanResponse.Content.ReadFromJsonAsync<Modeller.Elevplan>();
        if (oprettetPlan == null)
        {
            fejlbesked = "Fejl ved indlæsning af oprettet elevplan.";
            return;
        }

        // Opret 3 praktikperioder og tilknyt dem til elevplanen
        for (int i = 1; i <= 3; i++)
        {
            var praktik = new Modeller.Praktikperiode
                {
                    Navn = $"Praktikperiode {i}",
                    ElevId = valgtElevId,
                    ElevplanId = oprettetPlan.Id
                };

            var praktikResponse = await Http.PostAsJsonAsync("api/praktikperiode", praktik);

            // Stop hvis en praktikperiode fejler
            if (!praktikResponse.IsSuccessStatusCode)
            {
                fejlbesked = $"Kunne ikke oprette praktikperiode {i}.";
                return;
            }

            var oprettetPraktik = await praktikResponse.Content.ReadFromJsonAsync<Modeller.Praktikperiode>();

            if (oprettetPraktik != null)
            {
                // Gem praktikperiode-id’et på elevplanen
                oprettetPlan.PraktikperiodeIds.Add(oprettetPraktik.Id);

                // Hent tilhørende delmål-skabeloner for praktikperiode i
                var skabeloner = await Http.GetFromJsonAsync<List<Modeller.DelmaalSkabelon>>($"api/delmaalskabelon/periode/{i}");

                if (skabeloner != null)
                {
                    foreach (var skabelon in skabeloner)
                    {
                        // Opret konkret delmål baseret på skabelon
                        var delmaal = new Modeller.Delmål
                            {
                                Beskrivelse = skabelon.Beskrivelse,
                                Deadline = elevplan.StartDato.AddDays(skabelon.DeadlineOffsetDage),
                                Status = "Ikke fuldført",
                                Ansvarlig = skabelon.Ansvarlig,
                                Igangsætter = skabelon.Igangsætter,
                                Kommentar = "",
                                Elevtur = "",
                                ElevId = valgtElevId,
                                ElevplanId = oprettetPlan.Id,
                                PraktikperiodeId = oprettetPraktik.Id,
                                DelmaalSkabelonId = skabelon.Id // For at kunne spore skabelonen
                            };

                        // Send delmålet til backend
                        await Http.PostAsJsonAsync("api/delmaal", delmaal);
                    }
                }
            }
        }

        // Opdater elevplanen med ID'er på de praktikperioder, der blev oprettet
        await Http.PutAsJsonAsync($"api/elevplan/{oprettetPlan.Id}", oprettetPlan);

        // Tildel elevplanen til den valgte bruger (elev)
        var assignResponse = await Http.PutAsJsonAsync($"api/users/{valgtElevId}/assign-elevplan", new { ElevplanId = oprettetPlan.Id });

        if (!assignResponse.IsSuccessStatusCode)
        {
            fejlbesked = "Elevplan blev oprettet, men kunne ikke tildeles brugeren.";
            return;
        }

        // Hvis alt lykkedes – vis succes og omdiriger
        success = true;
        Nav.NavigateTo("/administrator");
    }
}
