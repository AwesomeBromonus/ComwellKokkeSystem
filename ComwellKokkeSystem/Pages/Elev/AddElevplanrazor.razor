@page "/opret-elevplan"
@using ComwellKokkeSystem.Service
@using Modeller
@inject IElevplanService ElevplanService
@inject IPraktikperiodeService PraktikService
@inject IDelmaalService DelmaalService
@inject IAuthService AuthService
@inject IUserService UserService
@inject IDelmaalSkabelonService DelmaalSkabelonService
@inject NavigationManager Nav

<link href="css/Panel.css" rel="stylesheet" />

<div class="admin-full-container">
    <div class="admin-header">
        <h2 class="admin-title">📘 Opret ny elevplan</h2>
        <p class="admin-subtitle">Tilknyt en elev og opret praktikforløb med tilhørende delmål</p>
    </div>

    <div class="admin-content">
        @if (!erTilladt)
        {
            <div class="alert alert-danger mt-3">
                ❌ Adgang nægtet – kun administratorer kan oprette elevplaner.
            </div>
        }
        else
        {
            <EditForm Model="elevplan" OnValidSubmit="GemElevplan">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card shadow-sm border-0 p-4 rounded-4 bg-white">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="form-group">
                            <label>Kommentar</label>
                            <InputTextArea class="form-control rounded-3" @bind-Value="elevplan.Kommentar" />
                        </div>

                        <div class="form-group">
                            <label>Startdato</label>
                            <InputDate class="form-control rounded-pill" @bind-Value="elevplan.StartDato" />
                        </div>

                        <div class="form-group">
                            <label>Slutdato</label>
                            <InputDate class="form-control rounded-pill" @bind-Value="elevplan.SlutDato" />
                        </div>

                        <div class="form-group">
                            <label>Skoleperiode</label>
                            <InputText class="form-control rounded-pill" placeholder="Fx GF2 - uge 33-41" @bind-Value="elevplan.Skoleperiode" />
                        </div>

                        <div class="form-group">
                            <label>Skoleforløb</label>
                            <InputText class="form-control rounded-pill" @bind-Value="elevplan.SkoleForløb" />
                        </div>
                    </div>
                </div>

                <h5 class="mt-5 mb-3 fw-bold">👨‍🍳 Vælg elev (kun elever uden elevplan)</h5>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                    @if (brugere.Count == 0)
                    {
                        <p class="text-muted">Ingen brugere fundet.</p>
                    }
                    else
                    {
                        @foreach (var b in brugere.Where(b => b.Role?.ToLower() == "elev" && (b.ElevplanId == null || b.ElevplanId == 0)))
                        {
                            <div class="card p-3 shadow-sm cursor-pointer"
                                 style="border: @(valgtElevId == b.Id ? "2px solid #198754" : "1px solid #ccc")"
                                 @onclick="@(() => valgtElevId = b.Id)">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@b.Navn</strong><br />
                                        <small>@b.Username – @b.Role</small>
                                    </div>
                                    <span class="badge bg-primary">ID: @b.Id</span>
                                    @if (valgtElevId == b.Id)
                                    {
                                        <span class="badge bg-success ms-2">✔️ Valgt</span>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>

                <button class="btn btn-primary mt-4 w-100 fw-bold rounded-pill" type="submit">➕ Gem Elevplan</button>

                @if (!string.IsNullOrEmpty(fejlbesked))
                {
                    <div class="alert alert-danger mt-3">@fejlbesked</div>
                }

                @if (success)
                {
                    <div class="alert alert-success mt-3">✅ Elevplan oprettet og tildelt!</div>
                }
            </EditForm>
        }
    </div>
</div>

@code {
    private Modeller.Elevplan elevplan = new();
    private List<Modeller.Praktikperiode> praktikPerioder = new();
    private List<Modeller.UserModel> brugere = new();
    private int valgtElevId = 0;
    private bool success = false;
    private bool erTilladt = false;
    private string? fejlbesked = null;

    protected override async Task OnInitializedAsync()
    {
        var rolle = await AuthService.GetCurrentUserRoleAsync();
        if (rolle?.ToLower() != "admin")
        {
            erTilladt = false;
            Nav.NavigateTo("/elevplaner", true);
            return;
        }

        erTilladt = true;
        praktikPerioder = await PraktikService.GetAllAsync();
        brugere = await UserService.GetAllAsync();
    }

    private async Task GemElevplan()
    {
        fejlbesked = null;

        if (valgtElevId == 0)
        {
            fejlbesked = "Du skal vælge en elev.";
            return;
        }

        elevplan.ElevId = valgtElevId;
        elevplan.OprettetDato = DateTime.Now;
        elevplan.PraktikperiodeIds = new List<int>();

        await ElevplanService.AddElevplanAsync(elevplan);

        var elevplaner = await ElevplanService.GetElevplanerForElevAsync(valgtElevId);
        var oprettetPlan = elevplaner?.OrderByDescending(e => e.OprettetDato).FirstOrDefault();

        if (oprettetPlan == null)
        {
            fejlbesked = "Fejl ved indlæsning af oprettet elevplan.";
            return;
        }

        for (int i = 1; i <= 3; i++)
        {
            var praktik = new Praktikperiode
                {
                    Navn = $"Praktikperiode {i}",
                    ElevId = valgtElevId,
                    ElevplanId = oprettetPlan.Id
                };

            await PraktikService.AddAsync(praktik);

            var praktikperioder = await PraktikService.GetAllAsync();
            var oprettetPraktik = praktikperioder.LastOrDefault(p => p.ElevplanId == oprettetPlan.Id && p.Navn == praktik.Navn);

            if (oprettetPraktik != null)
            {
                oprettetPlan.PraktikperiodeIds.Add(oprettetPraktik.Id);

                var skabeloner = await DelmaalSkabelonService.GetByPeriodeAsync(i);
                if (skabeloner != null)
                {
                    foreach (var skabelon in skabeloner)
                    {
                        var delmaal = new Modeller.Delmål
                            {
                                Beskrivelse = skabelon.Beskrivelse,
                                Status = "Ikke fuldført",
                                Ansvarlig = skabelon.Ansvarlig,
                                Igangsætter = skabelon.Igangsætter,
                                Kommentar = "",
                                Elevtur = "",
                                ElevId = valgtElevId,
                                ElevplanId = oprettetPlan.Id,
                                PraktikperiodeId = oprettetPraktik.Id,
                                DelmaalSkabelonId = skabelon.Id
                            };

                        await DelmaalService.AddDelmaalAsync(delmaal);
                    }
                }
            }
        }

        await ElevplanService.UpdateElevplanAsync(oprettetPlan);
        await UserService.AssignElevplanToUserAsync(valgtElevId, oprettetPlan.Id);

        // ✅ Fjern eleven fra listen så UI opdateres korrekt
        var elev = brugere.FirstOrDefault(b => b.Id == valgtElevId);
        if (elev != null)
        {
            brugere.Remove(elev);
        }

        success = true;
        valgtElevId = 0;
        StateHasChanged();
        await Task.Delay(2000);
        Nav.NavigateTo("/administrator");
    }

}

